{"ast":null,"code":"import { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport matchesValidator from 'validator/lib/matches';\nexport var MATCHES = 'matches';\nexport function matches(value, pattern, modifiers) {\n  return typeof value === 'string' && matchesValidator(value, pattern, modifiers);\n}\nexport function Matches(pattern, modifiersOrAnnotationOptions, validationOptions) {\n  var modifiers;\n  if (modifiersOrAnnotationOptions && modifiersOrAnnotationOptions instanceof Object && !validationOptions) {\n    validationOptions = modifiersOrAnnotationOptions;\n  } else {\n    modifiers = modifiersOrAnnotationOptions;\n  }\n  return ValidateBy({\n    name: MATCHES,\n    constraints: [pattern, modifiers],\n    validator: {\n      validate: function (value, args) {\n        return matches(value, args === null || args === void 0 ? void 0 : args.constraints[0], args === null || args === void 0 ? void 0 : args.constraints[1]);\n      },\n      defaultMessage: buildMessage(function (eachPrefix, args) {\n        return eachPrefix + '$property must match $constraint1 regular expression';\n      }, validationOptions)\n    }\n  }, validationOptions);\n}","map":{"version":3,"mappings":"AACA,SAASA,YAAY,EAAEC,UAAU,QAAQ,sBAAsB;AAC/D,OAAOC,gBAAgB,MAAM,uBAAuB;AAEpD,OAAO,IAAMC,OAAO,GAAG,SAAS;AAQhC,OAAM,SAAUC,OAAOA,CAACC,KAAa,EAAEC,OAAwB,EAAEC,SAAkB;EACjF,OAAO,OAAOF,KAAK,KAAK,QAAQ,IAAIH,gBAAgB,CAACG,KAAK,EAAEC,OAAyB,EAAEC,SAAS,CAAC;AACnG;AAQA,OAAM,SAAUC,OAAOA,CACrBF,OAAwB,EACxBG,4BAAyD,EACzDC,iBAAqC;EAErC,IAAIH,SAAiB;EACrB,IAAIE,4BAA4B,IAAIA,4BAA4B,YAAYE,MAAM,IAAI,CAACD,iBAAiB,EAAE;IACxGA,iBAAiB,GAAGD,4BAA4B;GACjD,MAAM;IACLF,SAAS,GAAGE,4BAAsC;;EAGpD,OAAOR,UAAU,CACf;IACEW,IAAI,EAAET,OAAO;IACbU,WAAW,EAAE,CAACP,OAAO,EAAEC,SAAS,CAAC;IACjCO,SAAS,EAAE;MACTC,QAAQ,EAAE,UAACV,KAAK,EAAEW,IAAI;QAAc,cAAO,CAACX,KAAK,EAAEW,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEH,WAAW,CAAC,CAAC,CAAC,EAAEG,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEH,WAAW,CAAC,CAAC,CAAC,CAAC;MAA1D,CAA0D;MAC9FI,cAAc,EAAEjB,YAAY,CAC1B,UAACkB,UAAU,EAAEF,IAAI;QAAK,iBAAU,GAAG,sDAAsD;MAAnE,CAAmE,EACzFN,iBAAiB;;GAGtB,EACDA,iBAAiB,CAClB;AACH","names":["buildMessage","ValidateBy","matchesValidator","MATCHES","matches","value","pattern","modifiers","Matches","modifiersOrAnnotationOptions","validationOptions","Object","name","constraints","validator","validate","args","defaultMessage","eachPrefix"],"sourceRoot":"","sources":["../../../../src/decorator/string/Matches.ts"],"sourcesContent":["import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport matchesValidator from 'validator/lib/matches';\n\nexport const MATCHES = 'matches';\n\n/**\n * Checks if string matches the pattern. Either matches('foo', /foo/i).\n * If given value is not a string, then it returns false.\n */\nexport function matches(value: string, pattern: RegExp): boolean;\nexport function matches(value: string, pattern: string, modifiers: string): boolean;\nexport function matches(value: string, pattern: RegExp | string, modifiers?: string): boolean {\n  return typeof value === 'string' && matchesValidator(value, pattern as unknown as any, modifiers);\n}\n\n/**\n * Checks if string matches the pattern. Either matches('foo', /foo/i)\n * If given value is not a string, then it returns false.\n */\nexport function Matches(pattern: RegExp, validationOptions?: ValidationOptions): PropertyDecorator;\nexport function Matches(pattern: string, modifiers?: string, validationOptions?: ValidationOptions): PropertyDecorator;\nexport function Matches(\n  pattern: RegExp | string,\n  modifiersOrAnnotationOptions?: string | ValidationOptions,\n  validationOptions?: ValidationOptions\n): PropertyDecorator {\n  let modifiers: string;\n  if (modifiersOrAnnotationOptions && modifiersOrAnnotationOptions instanceof Object && !validationOptions) {\n    validationOptions = modifiersOrAnnotationOptions;\n  } else {\n    modifiers = modifiersOrAnnotationOptions as string;\n  }\n\n  return ValidateBy(\n    {\n      name: MATCHES,\n      constraints: [pattern, modifiers],\n      validator: {\n        validate: (value, args): boolean => matches(value, args?.constraints[0], args?.constraints[1]),\n        defaultMessage: buildMessage(\n          (eachPrefix, args) => eachPrefix + '$property must match $constraint1 regular expression',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n"]},"metadata":{},"sourceType":"module"}