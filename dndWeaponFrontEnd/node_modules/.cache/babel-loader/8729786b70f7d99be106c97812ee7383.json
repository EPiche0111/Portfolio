{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nexport var IS_ENUM = 'isEnum';\n/**\n * Checks if a given value is the member of the provided enum.\n */\nexport function isEnum(value, entity) {\n  var enumValues = Object.keys(entity).map(function (k) {\n    return entity[k];\n  });\n  return enumValues.includes(value);\n}\n/**\n * Returns the possible values from an enum (both simple number indexed and string indexed enums).\n */\nfunction validEnumValues(entity) {\n  return Object.entries(entity).filter(function (_a) {\n    var _b = __read(_a, 2),\n      key = _b[0],\n      value = _b[1];\n    return isNaN(parseInt(key));\n  }).map(function (_a) {\n    var _b = __read(_a, 2),\n      key = _b[0],\n      value = _b[1];\n    return value;\n  });\n}\n/**\n * Checks if a given value is the member of the provided enum.\n */\nexport function IsEnum(entity, validationOptions) {\n  return ValidateBy({\n    name: IS_ENUM,\n    constraints: [entity, validEnumValues(entity)],\n    validator: {\n      validate: function (value, args) {\n        return isEnum(value, args === null || args === void 0 ? void 0 : args.constraints[0]);\n      },\n      defaultMessage: buildMessage(function (eachPrefix) {\n        return eachPrefix + '$property must be one of the following values: $constraint2';\n      }, validationOptions)\n    }\n  }, validationOptions);\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;AACA,SAASA,YAAY,EAAEC,UAAU,QAAQ,sBAAsB;AAE/D,OAAO,IAAMC,OAAO,GAAG,QAAQ;AAE/B;;;AAGA,OAAM,SAAUC,MAAMA,CAACC,KAAc,EAAEC,MAAW;EAChD,IAAMC,UAAU,GAAGC,MAAM,CAACC,IAAI,CAACH,MAAM,CAAC,CAACI,GAAG,CAAC,WAAC;IAAI,aAAM,CAACC,CAAC,CAAC;EAAT,CAAS,CAAC;EAC1D,OAAOJ,UAAU,CAACK,QAAQ,CAACP,KAAK,CAAC;AACnC;AAEA;;;AAGA,SAASQ,eAAeA,CAACP,MAAW;EAClC,OAAOE,MAAM,CAACM,OAAO,CAACR,MAAM,CAAC,CAC1BS,MAAM,CAAC,UAACC,EAAY;QAAZC,kBAAY;MAAXC,GAAG;MAAEb,KAAK;IAAM,YAAK,CAACc,QAAQ,CAACD,GAAG,CAAC,CAAC;EAApB,CAAoB,CAAC,CAC9CR,GAAG,CAAC,UAACM,EAAY;QAAZC,kBAAY;MAAXC,GAAG;MAAEb,KAAK;IAAM,YAAe;EAAf,CAAe,CAAC;AAC3C;AAEA;;;AAGA,OAAM,SAAUe,MAAMA,CAACd,MAAc,EAAEe,iBAAqC;EAC1E,OAAOnB,UAAU,CACf;IACEoB,IAAI,EAAEnB,OAAO;IACboB,WAAW,EAAE,CAACjB,MAAM,EAAEO,eAAe,CAACP,MAAM,CAAC,CAAC;IAC9CkB,SAAS,EAAE;MACTC,QAAQ,EAAE,UAACpB,KAAK,EAAEqB,IAAI;QAAc,aAAM,CAACrB,KAAK,EAAEqB,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEH,WAAW,CAAC,CAAC,CAAC,CAAC;MAAnC,CAAmC;MACvEI,cAAc,EAAE1B,YAAY,CAC1B,oBAAU;QAAI,iBAAU,GAAG,6DAA6D;MAA1E,CAA0E,EACxFoB,iBAAiB;;GAGtB,EACDA,iBAAiB,CAClB;AACH","names":["buildMessage","ValidateBy","IS_ENUM","isEnum","value","entity","enumValues","Object","keys","map","k","includes","validEnumValues","entries","filter","_a","_b","key","parseInt","IsEnum","validationOptions","name","constraints","validator","validate","args","defaultMessage"],"sourceRoot":"","sources":["../../../../src/decorator/typechecker/IsEnum.ts"],"sourcesContent":["import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\n\nexport const IS_ENUM = 'isEnum';\n\n/**\n * Checks if a given value is the member of the provided enum.\n */\nexport function isEnum(value: unknown, entity: any): boolean {\n  const enumValues = Object.keys(entity).map(k => entity[k]);\n  return enumValues.includes(value);\n}\n\n/**\n * Returns the possible values from an enum (both simple number indexed and string indexed enums).\n */\nfunction validEnumValues(entity: any): string[] {\n  return Object.entries(entity)\n    .filter(([key, value]) => isNaN(parseInt(key)))\n    .map(([key, value]) => value as string);\n}\n\n/**\n * Checks if a given value is the member of the provided enum.\n */\nexport function IsEnum(entity: object, validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_ENUM,\n      constraints: [entity, validEnumValues(entity)],\n      validator: {\n        validate: (value, args): boolean => isEnum(value, args?.constraints[0]),\n        defaultMessage: buildMessage(\n          eachPrefix => eachPrefix + '$property must be one of the following values: $constraint2',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n"]},"metadata":{},"sourceType":"module"}