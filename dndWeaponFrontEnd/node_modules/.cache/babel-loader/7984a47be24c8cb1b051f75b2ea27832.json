{"ast":null,"code":"import { buildMessage, ValidateBy } from '../common/ValidateBy';\nexport var IS_STRING = 'isString';\n/**\n * Checks if a given value is a real string.\n */\nexport function isString(value) {\n  return value instanceof String || typeof value === 'string';\n}\n/**\n * Checks if a given value is a real string.\n */\nexport function IsString(validationOptions) {\n  return ValidateBy({\n    name: IS_STRING,\n    validator: {\n      validate: function (value, args) {\n        return isString(value);\n      },\n      defaultMessage: buildMessage(function (eachPrefix) {\n        return eachPrefix + '$property must be a string';\n      }, validationOptions)\n    }\n  }, validationOptions);\n}","map":{"version":3,"mappings":"AACA,SAASA,YAAY,EAAEC,UAAU,QAAQ,sBAAsB;AAE/D,OAAO,IAAMC,SAAS,GAAG,UAAU;AAEnC;;;AAGA,OAAM,SAAUC,QAAQA,CAACC,KAAc;EACrC,OAAOA,KAAK,YAAYC,MAAM,IAAI,OAAOD,KAAK,KAAK,QAAQ;AAC7D;AAEA;;;AAGA,OAAM,SAAUE,QAAQA,CAACC,iBAAqC;EAC5D,OAAON,UAAU,CACf;IACEO,IAAI,EAAEN,SAAS;IACfO,SAAS,EAAE;MACTC,QAAQ,EAAE,UAACN,KAAK,EAAEO,IAAI;QAAc,eAAQ,CAACP,KAAK,CAAC;MAAf,CAAe;MACnDQ,cAAc,EAAEZ,YAAY,CAAC,oBAAU;QAAI,iBAAU,GAAG,4BAA4B;MAAzC,CAAyC,EAAEO,iBAAiB;;GAE1G,EACDA,iBAAiB,CAClB;AACH","names":["buildMessage","ValidateBy","IS_STRING","isString","value","String","IsString","validationOptions","name","validator","validate","args","defaultMessage"],"sourceRoot":"","sources":["../../../../src/decorator/typechecker/IsString.ts"],"sourcesContent":["import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\n\nexport const IS_STRING = 'isString';\n\n/**\n * Checks if a given value is a real string.\n */\nexport function isString(value: unknown): value is string {\n  return value instanceof String || typeof value === 'string';\n}\n\n/**\n * Checks if a given value is a real string.\n */\nexport function IsString(validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_STRING,\n      validator: {\n        validate: (value, args): boolean => isString(value),\n        defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be a string', validationOptions),\n      },\n    },\n    validationOptions\n  );\n}\n"]},"metadata":{},"sourceType":"module"}