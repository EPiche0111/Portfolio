{"ast":null,"code":"import { buildMessage, ValidateBy } from '../common/ValidateBy';\nexport var IS_NUMBER = 'isNumber';\n/**\n * Checks if a given value is a number.\n */\nexport function isNumber(value, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  if (typeof value !== 'number') {\n    return false;\n  }\n  if (value === Infinity || value === -Infinity) {\n    return !!options.allowInfinity;\n  }\n  if (Number.isNaN(value)) {\n    return !!options.allowNaN;\n  }\n  if (options.maxDecimalPlaces !== undefined) {\n    var decimalPlaces = 0;\n    if (value % 1 !== 0) {\n      decimalPlaces = value.toString().split('.')[1].length;\n    }\n    if (decimalPlaces > options.maxDecimalPlaces) {\n      return false;\n    }\n  }\n  return Number.isFinite(value);\n}\n/**\n * Checks if a value is a number.\n */\nexport function IsNumber(options, validationOptions) {\n  if (options === void 0) {\n    options = {};\n  }\n  return ValidateBy({\n    name: IS_NUMBER,\n    constraints: [options],\n    validator: {\n      validate: function (value, args) {\n        return isNumber(value, args === null || args === void 0 ? void 0 : args.constraints[0]);\n      },\n      defaultMessage: buildMessage(function (eachPrefix) {\n        return eachPrefix + '$property must be a number conforming to the specified constraints';\n      }, validationOptions)\n    }\n  }, validationOptions);\n}","map":{"version":3,"mappings":"AACA,SAASA,YAAY,EAAEC,UAAU,QAAQ,sBAAsB;AAE/D,OAAO,IAAMC,SAAS,GAAG,UAAU;AAWnC;;;AAGA,OAAM,SAAUC,QAAQA,CAACC,KAAc,EAAEC,OAA6B;EAA7B;IAAAA,YAA6B;EAAA;EACpE,IAAI,OAAOD,KAAK,KAAK,QAAQ,EAAE;IAC7B,OAAO,KAAK;;EAGd,IAAIA,KAAK,KAAKE,QAAQ,IAAIF,KAAK,KAAK,CAACE,QAAQ,EAAE;IAC7C,OAAO,CAAC,CAACD,OAAO,CAACE,aAAa;;EAGhC,IAAIC,MAAM,CAACC,KAAK,CAACL,KAAK,CAAC,EAAE;IACvB,OAAO,CAAC,CAACC,OAAO,CAACK,QAAQ;;EAG3B,IAAIL,OAAO,CAACM,gBAAgB,KAAKC,SAAS,EAAE;IAC1C,IAAIC,aAAa,GAAG,CAAC;IACrB,IAAIT,KAAK,GAAG,CAAC,KAAK,CAAC,EAAE;MACnBS,aAAa,GAAGT,KAAK,CAACU,QAAQ,EAAE,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACC,MAAM;;IAEvD,IAAIH,aAAa,GAAGR,OAAO,CAACM,gBAAgB,EAAE;MAC5C,OAAO,KAAK;;;EAIhB,OAAOH,MAAM,CAACS,QAAQ,CAACb,KAAK,CAAC;AAC/B;AAEA;;;AAGA,OAAM,SAAUc,QAAQA,CAACb,OAA6B,EAAEc,iBAAqC;EAApE;IAAAd,YAA6B;EAAA;EACpD,OAAOJ,UAAU,CACf;IACEmB,IAAI,EAAElB,SAAS;IACfmB,WAAW,EAAE,CAAChB,OAAO,CAAC;IACtBiB,SAAS,EAAE;MACTC,QAAQ,EAAE,UAACnB,KAAK,EAAEoB,IAAI;QAAc,eAAQ,CAACpB,KAAK,EAAEoB,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEH,WAAW,CAAC,CAAC,CAAC,CAAC;MAArC,CAAqC;MACzEI,cAAc,EAAEzB,YAAY,CAC1B,oBAAU;QAAI,iBAAU,GAAG,oEAAoE;MAAjF,CAAiF,EAC/FmB,iBAAiB;;GAGtB,EACDA,iBAAiB,CAClB;AACH","names":["buildMessage","ValidateBy","IS_NUMBER","isNumber","value","options","Infinity","allowInfinity","Number","isNaN","allowNaN","maxDecimalPlaces","undefined","decimalPlaces","toString","split","length","isFinite","IsNumber","validationOptions","name","constraints","validator","validate","args","defaultMessage"],"sourceRoot":"","sources":["../../../../src/decorator/typechecker/IsNumber.ts"],"sourcesContent":["import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\n\nexport const IS_NUMBER = 'isNumber';\n\n/**\n * Options to be passed to IsNumber decorator.\n */\nexport interface IsNumberOptions {\n  allowNaN?: boolean;\n  allowInfinity?: boolean;\n  maxDecimalPlaces?: number;\n}\n\n/**\n * Checks if a given value is a number.\n */\nexport function isNumber(value: unknown, options: IsNumberOptions = {}): value is number {\n  if (typeof value !== 'number') {\n    return false;\n  }\n\n  if (value === Infinity || value === -Infinity) {\n    return !!options.allowInfinity;\n  }\n\n  if (Number.isNaN(value)) {\n    return !!options.allowNaN;\n  }\n\n  if (options.maxDecimalPlaces !== undefined) {\n    let decimalPlaces = 0;\n    if (value % 1 !== 0) {\n      decimalPlaces = value.toString().split('.')[1].length;\n    }\n    if (decimalPlaces > options.maxDecimalPlaces) {\n      return false;\n    }\n  }\n\n  return Number.isFinite(value);\n}\n\n/**\n * Checks if a value is a number.\n */\nexport function IsNumber(options: IsNumberOptions = {}, validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_NUMBER,\n      constraints: [options],\n      validator: {\n        validate: (value, args): boolean => isNumber(value, args?.constraints[0]),\n        defaultMessage: buildMessage(\n          eachPrefix => eachPrefix + '$property must be a number conforming to the specified constraints',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n"]},"metadata":{},"sourceType":"module"}