{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.array.push.js\";\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (g && (g = 0, op[0] && (_ = 0)), _) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nimport { ValidationExecutor } from './ValidationExecutor';\n/**\n * Validator performs validation of the given object based on its metadata.\n */\nvar Validator = /** @class */function () {\n  function Validator() {}\n  /**\n   * Performs validation of the given object based on decorators or validation schema.\n   */\n  Validator.prototype.validate = function (objectOrSchemaName, objectOrValidationOptions, maybeValidatorOptions) {\n    return this.coreValidate(objectOrSchemaName, objectOrValidationOptions, maybeValidatorOptions);\n  };\n  /**\n   * Performs validation of the given object based on decorators or validation schema and reject on error.\n   */\n  Validator.prototype.validateOrReject = function (objectOrSchemaName, objectOrValidationOptions, maybeValidatorOptions) {\n    return __awaiter(this, void 0, void 0, function () {\n      var errors;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.coreValidate(objectOrSchemaName, objectOrValidationOptions, maybeValidatorOptions)];\n          case 1:\n            errors = _a.sent();\n            if (errors.length) return [2 /*return*/, Promise.reject(errors)];\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Performs validation of the given object based on decorators or validation schema.\n   */\n  Validator.prototype.validateSync = function (objectOrSchemaName, objectOrValidationOptions, maybeValidatorOptions) {\n    var object = typeof objectOrSchemaName === 'string' ? objectOrValidationOptions : objectOrSchemaName;\n    var options = typeof objectOrSchemaName === 'string' ? maybeValidatorOptions : objectOrValidationOptions;\n    var schema = typeof objectOrSchemaName === 'string' ? objectOrSchemaName : undefined;\n    var executor = new ValidationExecutor(this, options);\n    executor.ignoreAsyncValidations = true;\n    var validationErrors = [];\n    executor.execute(object, schema, validationErrors);\n    return executor.stripEmptyErrors(validationErrors);\n  };\n  // -------------------------------------------------------------------------\n  // Private Properties\n  // -------------------------------------------------------------------------\n  /**\n   * Performs validation of the given object based on decorators or validation schema.\n   * Common method for `validateOrReject` and `validate` methods.\n   */\n  Validator.prototype.coreValidate = function (objectOrSchemaName, objectOrValidationOptions, maybeValidatorOptions) {\n    var object = typeof objectOrSchemaName === 'string' ? objectOrValidationOptions : objectOrSchemaName;\n    var options = typeof objectOrSchemaName === 'string' ? maybeValidatorOptions : objectOrValidationOptions;\n    var schema = typeof objectOrSchemaName === 'string' ? objectOrSchemaName : undefined;\n    var executor = new ValidationExecutor(this, options);\n    var validationErrors = [];\n    executor.execute(object, schema, validationErrors);\n    return Promise.all(executor.awaitingPromises).then(function () {\n      return executor.stripEmptyErrors(validationErrors);\n    });\n  };\n  return Validator;\n}();\nexport { Validator };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,SAASA,kBAAkB,QAAQ,sBAAsB;AAGzD;;;AAGA;EAAA,sBAwGA;EAzFE;;;EAGAC,4BAAQ,GAAR,UACEC,kBAAmC,EACnCC,yBAAqD,EACrDC,qBAAwC;IAExC,OAAO,IAAI,CAACC,YAAY,CAACH,kBAAkB,EAAEC,yBAAyB,EAAEC,qBAAqB,CAAC;EAChG,CAAC;EAYD;;;EAGMH,oCAAgB,GAAtB,UACEC,kBAAmC,EACnCC,yBAAqD,EACrDC,qBAAwC;;;;;;YAEzB,qBAAM,IAAI,CAACC,YAAY,CAACH,kBAAkB,EAAEC,yBAAyB,EAAEC,qBAAqB,CAAC;;YAAtGE,MAAM,GAAGC,SAA6F;YAC5G,IAAID,MAAM,CAACE,MAAM,EAAE,sBAAOC,OAAO,CAACC,MAAM,CAACJ,MAAM,CAAC;;;;;GACjD;EAaD;;;EAGAL,gCAAY,GAAZ,UACEC,kBAAmC,EACnCC,yBAAqD,EACrDC,qBAAwC;IAExC,IAAMO,MAAM,GAAG,OAAOT,kBAAkB,KAAK,QAAQ,GAAIC,yBAAoC,GAAGD,kBAAkB;IAClH,IAAMU,OAAO,GACX,OAAOV,kBAAkB,KAAK,QAAQ,GAAGE,qBAAqB,GAAID,yBAA+C;IACnH,IAAMU,MAAM,GAAG,OAAOX,kBAAkB,KAAK,QAAQ,GAAGA,kBAAkB,GAAGY,SAAS;IAEtF,IAAMC,QAAQ,GAAG,IAAIf,kBAAkB,CAAC,IAAI,EAAEY,OAAO,CAAC;IACtDG,QAAQ,CAACC,sBAAsB,GAAG,IAAI;IACtC,IAAMC,gBAAgB,GAAsB,EAAE;IAC9CF,QAAQ,CAACG,OAAO,CAACP,MAAM,EAAEE,MAAM,EAAEI,gBAAgB,CAAC;IAClD,OAAOF,QAAQ,CAACI,gBAAgB,CAACF,gBAAgB,CAAC;EACpD,CAAC;EAED;EACA;EACA;EACA;;;;EAIQhB,gCAAY,GAApB,UACEC,kBAAmC,EACnCC,yBAAqD,EACrDC,qBAAwC;IAExC,IAAMO,MAAM,GAAG,OAAOT,kBAAkB,KAAK,QAAQ,GAAIC,yBAAoC,GAAGD,kBAAkB;IAClH,IAAMU,OAAO,GACX,OAAOV,kBAAkB,KAAK,QAAQ,GAAGE,qBAAqB,GAAID,yBAA+C;IACnH,IAAMU,MAAM,GAAG,OAAOX,kBAAkB,KAAK,QAAQ,GAAGA,kBAAkB,GAAGY,SAAS;IAEtF,IAAMC,QAAQ,GAAG,IAAIf,kBAAkB,CAAC,IAAI,EAAEY,OAAO,CAAC;IACtD,IAAMK,gBAAgB,GAAsB,EAAE;IAC9CF,QAAQ,CAACG,OAAO,CAACP,MAAM,EAAEE,MAAM,EAAEI,gBAAgB,CAAC;IAElD,OAAOR,OAAO,CAACW,GAAG,CAACL,QAAQ,CAACM,gBAAgB,CAAC,CAACC,IAAI,CAAC;MACjD,OAAOP,QAAQ,CAACI,gBAAgB,CAACF,gBAAgB,CAAC;IACpD,CAAC,CAAC;EACJ,CAAC;EACH,gBAAC;AAAD,CAAC,CAxGD","names":["ValidationExecutor","Validator","objectOrSchemaName","objectOrValidationOptions","maybeValidatorOptions","coreValidate","errors","_a","length","Promise","reject","object","options","schema","undefined","executor","ignoreAsyncValidations","validationErrors","execute","stripEmptyErrors","all","awaitingPromises","then"],"sourceRoot":"","sources":["../../../src/validation/Validator.ts"],"sourcesContent":["import { ValidationError } from './ValidationError';\nimport { ValidatorOptions } from './ValidatorOptions';\nimport { ValidationExecutor } from './ValidationExecutor';\nimport { ValidationOptions } from '../decorator/ValidationOptions';\n\n/**\n * Validator performs validation of the given object based on its metadata.\n */\nexport class Validator {\n  // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Performs validation of the given object based on decorators used in given object class.\n   */\n  validate(object: object, options?: ValidatorOptions): Promise<ValidationError[]>;\n\n  /**\n   * Performs validation of the given object based on validation schema.\n   */\n  validate(schemaName: string, object: object, options?: ValidatorOptions): Promise<ValidationError[]>;\n\n  /**\n   * Performs validation of the given object based on decorators or validation schema.\n   */\n  validate(\n    objectOrSchemaName: object | string,\n    objectOrValidationOptions: object | ValidationOptions,\n    maybeValidatorOptions?: ValidatorOptions\n  ): Promise<ValidationError[]> {\n    return this.coreValidate(objectOrSchemaName, objectOrValidationOptions, maybeValidatorOptions);\n  }\n\n  /**\n   * Performs validation of the given object based on decorators used in given object class and reject on error.\n   */\n  validateOrReject(object: object, options?: ValidatorOptions): Promise<void>;\n\n  /**\n   * Performs validation of the given object based on validation schema and reject on error.\n   */\n  validateOrReject(schemaName: string, object: object, options?: ValidatorOptions): Promise<void>;\n\n  /**\n   * Performs validation of the given object based on decorators or validation schema and reject on error.\n   */\n  async validateOrReject(\n    objectOrSchemaName: object | string,\n    objectOrValidationOptions: object | ValidationOptions,\n    maybeValidatorOptions?: ValidatorOptions\n  ): Promise<void> {\n    const errors = await this.coreValidate(objectOrSchemaName, objectOrValidationOptions, maybeValidatorOptions);\n    if (errors.length) return Promise.reject(errors);\n  }\n\n  /**\n   * Performs validation of the given object based on decorators used in given object class.\n   * NOTE: This method completely ignores all async validations.\n   */\n  validateSync(object: object, options?: ValidatorOptions): ValidationError[];\n\n  /**\n   * Performs validation of the given object based on validation schema.\n   */\n  validateSync(schemaName: string, object: object, options?: ValidatorOptions): ValidationError[];\n\n  /**\n   * Performs validation of the given object based on decorators or validation schema.\n   */\n  validateSync(\n    objectOrSchemaName: object | string,\n    objectOrValidationOptions: object | ValidationOptions,\n    maybeValidatorOptions?: ValidatorOptions\n  ): ValidationError[] {\n    const object = typeof objectOrSchemaName === 'string' ? (objectOrValidationOptions as object) : objectOrSchemaName;\n    const options =\n      typeof objectOrSchemaName === 'string' ? maybeValidatorOptions : (objectOrValidationOptions as ValidationOptions);\n    const schema = typeof objectOrSchemaName === 'string' ? objectOrSchemaName : undefined;\n\n    const executor = new ValidationExecutor(this, options);\n    executor.ignoreAsyncValidations = true;\n    const validationErrors: ValidationError[] = [];\n    executor.execute(object, schema, validationErrors);\n    return executor.stripEmptyErrors(validationErrors);\n  }\n\n  // -------------------------------------------------------------------------\n  // Private Properties\n  // -------------------------------------------------------------------------\n  /**\n   * Performs validation of the given object based on decorators or validation schema.\n   * Common method for `validateOrReject` and `validate` methods.\n   */\n  private coreValidate(\n    objectOrSchemaName: object | string,\n    objectOrValidationOptions: object | ValidationOptions,\n    maybeValidatorOptions?: ValidatorOptions\n  ): Promise<ValidationError[]> {\n    const object = typeof objectOrSchemaName === 'string' ? (objectOrValidationOptions as object) : objectOrSchemaName;\n    const options =\n      typeof objectOrSchemaName === 'string' ? maybeValidatorOptions : (objectOrValidationOptions as ValidationOptions);\n    const schema = typeof objectOrSchemaName === 'string' ? objectOrSchemaName : undefined;\n\n    const executor = new ValidationExecutor(this, options);\n    const validationErrors: ValidationError[] = [];\n    executor.execute(object, schema, validationErrors);\n\n    return Promise.all(executor.awaitingPromises).then(() => {\n      return executor.stripEmptyErrors(validationErrors);\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}