{"ast":null,"code":"import { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isIsbnValidator from 'validator/lib/isISBN';\nexport var IS_ISBN = 'isIsbn';\n/**\n * Checks if the string is an ISBN (version 10 or 13).\n * If given value is not a string, then it returns false.\n */\nexport function isISBN(value, version) {\n  /* eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion */\n  var versionStr = version ? \"\".concat(version) : undefined;\n  return typeof value === 'string' && isIsbnValidator(value, versionStr);\n}\n/**\n * Checks if the string is an ISBN (version 10 or 13).\n * If given value is not a string, then it returns false.\n */\nexport function IsISBN(version, validationOptions) {\n  return ValidateBy({\n    name: IS_ISBN,\n    constraints: [version],\n    validator: {\n      validate: function (value, args) {\n        return isISBN(value, args === null || args === void 0 ? void 0 : args.constraints[0]);\n      },\n      defaultMessage: buildMessage(function (eachPrefix) {\n        return eachPrefix + '$property must be an ISBN';\n      }, validationOptions)\n    }\n  }, validationOptions);\n}","map":{"version":3,"mappings":"AACA,SAASA,YAAY,EAAEC,UAAU,QAAQ,sBAAsB;AAC/D,OAAOC,eAAe,MAAM,sBAAsB;AAIlD,OAAO,IAAMC,OAAO,GAAG,QAAQ;AAE/B;;;;AAIA,OAAM,SAAUC,MAAMA,CAACC,KAAc,EAAEC,OAAuB;EAC5D;EACA,IAAMC,UAAU,GAAGD,OAAO,GAAI,UAAGA,OAAO,CAAkB,GAAGE,SAAS;EACtE,OAAO,OAAOH,KAAK,KAAK,QAAQ,IAAIH,eAAe,CAACG,KAAK,EAAEE,UAAU,CAAC;AACxE;AAEA;;;;AAIA,OAAM,SAAUE,MAAMA,CAACH,OAAuB,EAAEI,iBAAqC;EACnF,OAAOT,UAAU,CACf;IACEU,IAAI,EAAER,OAAO;IACbS,WAAW,EAAE,CAACN,OAAO,CAAC;IACtBO,SAAS,EAAE;MACTC,QAAQ,EAAE,UAACT,KAAK,EAAEU,IAAI;QAAc,aAAM,CAACV,KAAK,EAAEU,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEH,WAAW,CAAC,CAAC,CAAC,CAAC;MAAnC,CAAmC;MACvEI,cAAc,EAAEhB,YAAY,CAAC,oBAAU;QAAI,iBAAU,GAAG,2BAA2B;MAAxC,CAAwC,EAAEU,iBAAiB;;GAEzG,EACDA,iBAAiB,CAClB;AACH","names":["buildMessage","ValidateBy","isIsbnValidator","IS_ISBN","isISBN","value","version","versionStr","undefined","IsISBN","validationOptions","name","constraints","validator","validate","args","defaultMessage"],"sourceRoot":"","sources":["../../../../src/decorator/string/IsISBN.ts"],"sourcesContent":["import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isIsbnValidator from 'validator/lib/isISBN';\n\nexport type IsISBNVersion = '10' | '13' | 10 | 13;\n\nexport const IS_ISBN = 'isIsbn';\n\n/**\n * Checks if the string is an ISBN (version 10 or 13).\n * If given value is not a string, then it returns false.\n */\nexport function isISBN(value: unknown, version?: IsISBNVersion): boolean {\n  /* eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion */\n  const versionStr = version ? (`${version}` as '10' | '13') : undefined;\n  return typeof value === 'string' && isIsbnValidator(value, versionStr);\n}\n\n/**\n * Checks if the string is an ISBN (version 10 or 13).\n * If given value is not a string, then it returns false.\n */\nexport function IsISBN(version?: IsISBNVersion, validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_ISBN,\n      constraints: [version],\n      validator: {\n        validate: (value, args): boolean => isISBN(value, args?.constraints[0]),\n        defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be an ISBN', validationOptions),\n      },\n    },\n    validationOptions\n  );\n}\n"]},"metadata":{},"sourceType":"module"}