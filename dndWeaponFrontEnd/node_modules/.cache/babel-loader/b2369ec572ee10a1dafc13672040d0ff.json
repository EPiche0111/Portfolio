{"ast":null,"code":"import { buildMessage, ValidateBy } from '../common/ValidateBy';\nexport var IS_BOOLEAN = 'isBoolean';\n/**\n * Checks if a given value is a boolean.\n */\nexport function isBoolean(value) {\n  return value instanceof Boolean || typeof value === 'boolean';\n}\n/**\n * Checks if a value is a boolean.\n */\nexport function IsBoolean(validationOptions) {\n  return ValidateBy({\n    name: IS_BOOLEAN,\n    validator: {\n      validate: function (value, args) {\n        return isBoolean(value);\n      },\n      defaultMessage: buildMessage(function (eachPrefix) {\n        return eachPrefix + '$property must be a boolean value';\n      }, validationOptions)\n    }\n  }, validationOptions);\n}","map":{"version":3,"mappings":"AACA,SAASA,YAAY,EAAEC,UAAU,QAAQ,sBAAsB;AAE/D,OAAO,IAAMC,UAAU,GAAG,WAAW;AAErC;;;AAGA,OAAM,SAAUC,SAASA,CAACC,KAAc;EACtC,OAAOA,KAAK,YAAYC,OAAO,IAAI,OAAOD,KAAK,KAAK,SAAS;AAC/D;AAEA;;;AAGA,OAAM,SAAUE,SAASA,CAACC,iBAAqC;EAC7D,OAAON,UAAU,CACf;IACEO,IAAI,EAAEN,UAAU;IAChBO,SAAS,EAAE;MACTC,QAAQ,EAAE,UAACN,KAAK,EAAEO,IAAI;QAAc,gBAAS,CAACP,KAAK,CAAC;MAAhB,CAAgB;MACpDQ,cAAc,EAAEZ,YAAY,CAAC,oBAAU;QAAI,iBAAU,GAAG,mCAAmC;MAAhD,CAAgD,EAAEO,iBAAiB;;GAEjH,EACDA,iBAAiB,CAClB;AACH","names":["buildMessage","ValidateBy","IS_BOOLEAN","isBoolean","value","Boolean","IsBoolean","validationOptions","name","validator","validate","args","defaultMessage"],"sourceRoot":"","sources":["../../../../src/decorator/typechecker/IsBoolean.ts"],"sourcesContent":["import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\n\nexport const IS_BOOLEAN = 'isBoolean';\n\n/**\n * Checks if a given value is a boolean.\n */\nexport function isBoolean(value: unknown): value is boolean {\n  return value instanceof Boolean || typeof value === 'boolean';\n}\n\n/**\n * Checks if a value is a boolean.\n */\nexport function IsBoolean(validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_BOOLEAN,\n      validator: {\n        validate: (value, args): boolean => isBoolean(value),\n        defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be a boolean value', validationOptions),\n      },\n    },\n    validationOptions\n  );\n}\n"]},"metadata":{},"sourceType":"module"}