{"ast":null,"code":"import { buildMessage, ValidateBy } from '../common/ValidateBy';\nexport var IS_TIMEZONE = 'isTimeZone';\n/**\n * Checks if the string represents a valid IANA timezone\n * If the given value is not a valid IANA timezone, then it returns false.\n */\nexport function isTimeZone(value) {\n  try {\n    if (typeof value !== 'string') {\n      return false;\n    }\n    /** Specifying an invalid time-zone will raise a `RangeError: Invalid time zone specified` error. */\n    Intl.DateTimeFormat(undefined, {\n      timeZone: value\n    });\n    return true;\n  } catch (exception) {\n    return false;\n  }\n}\n/**\n * Checks if the string represents a valid IANA timezone\n * If the given value is not a valid IANA timezone, then it returns false.\n */\nexport function IsTimeZone(validationOptions) {\n  return ValidateBy({\n    name: IS_TIMEZONE,\n    validator: {\n      validate: function (value, args) {\n        return isTimeZone(value);\n      },\n      defaultMessage: buildMessage(function (eachPrefix) {\n        return eachPrefix + '$property must be a valid IANA time-zone';\n      }, validationOptions)\n    }\n  }, validationOptions);\n}","map":{"version":3,"mappings":"AACA,SAASA,YAAY,EAAEC,UAAU,QAAQ,sBAAsB;AAE/D,OAAO,IAAMC,WAAW,GAAG,YAAY;AAEvC;;;;AAIA,OAAM,SAAUC,UAAUA,CAACC,KAAc;EACvC,IAAI;IACF,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;MAC7B,OAAO,KAAK;;IAGd;IACAC,IAAI,CAACC,cAAc,CAACC,SAAS,EAAE;MAAEC,QAAQ,EAAEJ;IAAK,CAAE,CAAC;IAEnD,OAAO,IAAI;GACZ,CAAC,OAAOK,SAAS,EAAE;IAClB,OAAO,KAAK;;AAEhB;AAEA;;;;AAIA,OAAM,SAAUC,UAAUA,CAACC,iBAAqC;EAC9D,OAAOV,UAAU,CACf;IACEW,IAAI,EAAEV,WAAW;IACjBW,SAAS,EAAE;MACTC,QAAQ,EAAE,UAACV,KAAK,EAAEW,IAAI;QAAc,iBAAU,CAACX,KAAK,CAAC;MAAjB,CAAiB;MACrDY,cAAc,EAAEhB,YAAY,CAC1B,oBAAU;QAAI,iBAAU,GAAG,0CAA0C;MAAvD,CAAuD,EACrEW,iBAAiB;;GAGtB,EACDA,iBAAiB,CAClB;AACH","names":["buildMessage","ValidateBy","IS_TIMEZONE","isTimeZone","value","Intl","DateTimeFormat","undefined","timeZone","exception","IsTimeZone","validationOptions","name","validator","validate","args","defaultMessage"],"sourceRoot":"","sources":["../../../../src/decorator/string/IsTimeZone.ts"],"sourcesContent":["import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\n\nexport const IS_TIMEZONE = 'isTimeZone';\n\n/**\n * Checks if the string represents a valid IANA timezone\n * If the given value is not a valid IANA timezone, then it returns false.\n */\nexport function isTimeZone(value: unknown): boolean {\n  try {\n    if (typeof value !== 'string') {\n      return false;\n    }\n\n    /** Specifying an invalid time-zone will raise a `RangeError: Invalid time zone specified` error. */\n    Intl.DateTimeFormat(undefined, { timeZone: value });\n\n    return true;\n  } catch (exception) {\n    return false;\n  }\n}\n\n/**\n * Checks if the string represents a valid IANA timezone\n * If the given value is not a valid IANA timezone, then it returns false.\n */\nexport function IsTimeZone(validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_TIMEZONE,\n      validator: {\n        validate: (value, args): boolean => isTimeZone(value),\n        defaultMessage: buildMessage(\n          eachPrefix => eachPrefix + '$property must be a valid IANA time-zone',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n"]},"metadata":{},"sourceType":"module"}