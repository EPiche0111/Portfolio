{"ast":null,"code":"import { buildMessage, ValidateBy } from '../common/ValidateBy';\nexport var IS_INSTANCE = 'isInstance';\n/**\n * Checks if the value is an instance of the specified object.\n */\nexport function isInstance(object, targetTypeConstructor) {\n  return targetTypeConstructor && typeof targetTypeConstructor === 'function' && object instanceof targetTypeConstructor;\n}\n/**\n * Checks if the value is an instance of the specified object.\n */\nexport function IsInstance(targetType, validationOptions) {\n  return ValidateBy({\n    name: IS_INSTANCE,\n    constraints: [targetType],\n    validator: {\n      validate: function (value, args) {\n        return isInstance(value, args === null || args === void 0 ? void 0 : args.constraints[0]);\n      },\n      defaultMessage: buildMessage(function (eachPrefix, args) {\n        if (args === null || args === void 0 ? void 0 : args.constraints[0]) {\n          return eachPrefix + \"$property must be an instance of \".concat(args === null || args === void 0 ? void 0 : args.constraints[0].name);\n        } else {\n          return eachPrefix + \"\".concat(IS_INSTANCE, \" decorator expects and object as value, but got falsy value.\");\n        }\n      }, validationOptions)\n    }\n  }, validationOptions);\n}","map":{"version":3,"mappings":"AACA,SAASA,YAAY,EAAEC,UAAU,QAAQ,sBAAsB;AAE/D,OAAO,IAAMC,WAAW,GAAG,YAAY;AAEvC;;;AAGA,OAAM,SAAUC,UAAUA,CAACC,MAAe,EAAEC,qBAAkD;EAC5F,OACEA,qBAAqB,IAAI,OAAOA,qBAAqB,KAAK,UAAU,IAAID,MAAM,YAAYC,qBAAqB;AAEnH;AAEA;;;AAGA,OAAM,SAAUC,UAAUA,CACxBC,UAAuC,EACvCC,iBAAqC;EAErC,OAAOP,UAAU,CACf;IACEQ,IAAI,EAAEP,WAAW;IACjBQ,WAAW,EAAE,CAACH,UAAU,CAAC;IACzBI,SAAS,EAAE;MACTC,QAAQ,EAAE,UAACC,KAAK,EAAEC,IAAI;QAAc,iBAAU,CAACD,KAAK,EAAEC,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEJ,WAAW,CAAC,CAAC,CAAC,CAAC;MAAvC,CAAuC;MAC3EK,cAAc,EAAEf,YAAY,CAAC,UAACgB,UAAU,EAAEF,IAAI;QAC5C,IAAIA,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEJ,WAAW,CAAC,CAAC,CAAC,EAAE;UACxB,OAAOM,UAAU,GAAG,2CAAoCF,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEJ,WAAW,CAAC,CAAC,EAAED,IAAc,CAAE;SAC9F,MAAM;UACL,OAAOO,UAAU,GAAG,UAAGd,WAAW,iEAA8D;;MAEpG,CAAC,EAAEM,iBAAiB;;GAEvB,EACDA,iBAAiB,CAClB;AACH","names":["buildMessage","ValidateBy","IS_INSTANCE","isInstance","object","targetTypeConstructor","IsInstance","targetType","validationOptions","name","constraints","validator","validate","value","args","defaultMessage","eachPrefix"],"sourceRoot":"","sources":["../../../../src/decorator/object/IsInstance.ts"],"sourcesContent":["import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\n\nexport const IS_INSTANCE = 'isInstance';\n\n/**\n * Checks if the value is an instance of the specified object.\n */\nexport function isInstance(object: unknown, targetTypeConstructor: new (...args: any[]) => any): boolean {\n  return (\n    targetTypeConstructor && typeof targetTypeConstructor === 'function' && object instanceof targetTypeConstructor\n  );\n}\n\n/**\n * Checks if the value is an instance of the specified object.\n */\nexport function IsInstance(\n  targetType: new (...args: any[]) => any,\n  validationOptions?: ValidationOptions\n): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_INSTANCE,\n      constraints: [targetType],\n      validator: {\n        validate: (value, args): boolean => isInstance(value, args?.constraints[0]),\n        defaultMessage: buildMessage((eachPrefix, args) => {\n          if (args?.constraints[0]) {\n            return eachPrefix + `$property must be an instance of ${args?.constraints[0].name as string}`;\n          } else {\n            return eachPrefix + `${IS_INSTANCE} decorator expects and object as value, but got falsy value.`;\n          }\n        }, validationOptions),\n      },\n    },\n    validationOptions\n  );\n}\n"]},"metadata":{},"sourceType":"module"}