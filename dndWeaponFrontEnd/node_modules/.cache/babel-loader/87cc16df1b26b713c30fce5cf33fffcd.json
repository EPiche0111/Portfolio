{"ast":null,"code":"import { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isLengthValidator from 'validator/lib/isLength';\nexport var MIN_LENGTH = 'minLength';\n/**\n * Checks if the string's length is not less than given number. Note: this function takes into account surrogate pairs.\n * If given value is not a string, then it returns false.\n */\nexport function minLength(value, min) {\n  return typeof value === 'string' && isLengthValidator(value, {\n    min: min\n  });\n}\n/**\n * Checks if the string's length is not less than given number. Note: this function takes into account surrogate pairs.\n * If given value is not a string, then it returns false.\n */\nexport function MinLength(min, validationOptions) {\n  return ValidateBy({\n    name: MIN_LENGTH,\n    constraints: [min],\n    validator: {\n      validate: function (value, args) {\n        return minLength(value, args === null || args === void 0 ? void 0 : args.constraints[0]);\n      },\n      defaultMessage: buildMessage(function (eachPrefix) {\n        return eachPrefix + '$property must be longer than or equal to $constraint1 characters';\n      }, validationOptions)\n    }\n  }, validationOptions);\n}","map":{"version":3,"mappings":"AACA,SAASA,YAAY,EAAEC,UAAU,QAAQ,sBAAsB;AAC/D,OAAOC,iBAAiB,MAAM,wBAAwB;AAEtD,OAAO,IAAMC,UAAU,GAAG,WAAW;AAErC;;;;AAIA,OAAM,SAAUC,SAASA,CAACC,KAAc,EAAEC,GAAW;EACnD,OAAO,OAAOD,KAAK,KAAK,QAAQ,IAAIH,iBAAiB,CAACG,KAAK,EAAE;IAAEC,GAAG;EAAA,CAAE,CAAC;AACvE;AAEA;;;;AAIA,OAAM,SAAUC,SAASA,CAACD,GAAW,EAAEE,iBAAqC;EAC1E,OAAOP,UAAU,CACf;IACEQ,IAAI,EAAEN,UAAU;IAChBO,WAAW,EAAE,CAACJ,GAAG,CAAC;IAClBK,SAAS,EAAE;MACTC,QAAQ,EAAE,UAACP,KAAK,EAAEQ,IAAI;QAAc,gBAAS,CAACR,KAAK,EAAEQ,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEH,WAAW,CAAC,CAAC,CAAC,CAAC;MAAtC,CAAsC;MAC1EI,cAAc,EAAEd,YAAY,CAC1B,oBAAU;QAAI,iBAAU,GAAG,mEAAmE;MAAhF,CAAgF,EAC9FQ,iBAAiB;;GAGtB,EACDA,iBAAiB,CAClB;AACH","names":["buildMessage","ValidateBy","isLengthValidator","MIN_LENGTH","minLength","value","min","MinLength","validationOptions","name","constraints","validator","validate","args","defaultMessage"],"sourceRoot":"","sources":["../../../../src/decorator/string/MinLength.ts"],"sourcesContent":["import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isLengthValidator from 'validator/lib/isLength';\n\nexport const MIN_LENGTH = 'minLength';\n\n/**\n * Checks if the string's length is not less than given number. Note: this function takes into account surrogate pairs.\n * If given value is not a string, then it returns false.\n */\nexport function minLength(value: unknown, min: number): boolean {\n  return typeof value === 'string' && isLengthValidator(value, { min });\n}\n\n/**\n * Checks if the string's length is not less than given number. Note: this function takes into account surrogate pairs.\n * If given value is not a string, then it returns false.\n */\nexport function MinLength(min: number, validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: MIN_LENGTH,\n      constraints: [min],\n      validator: {\n        validate: (value, args): boolean => minLength(value, args?.constraints[0]),\n        defaultMessage: buildMessage(\n          eachPrefix => eachPrefix + '$property must be longer than or equal to $constraint1 characters',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n"]},"metadata":{},"sourceType":"module"}