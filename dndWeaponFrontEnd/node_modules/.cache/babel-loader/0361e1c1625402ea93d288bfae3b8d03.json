{"ast":null,"code":"import { buildMessage, ValidateBy } from './ValidateBy';\nimport { isLatLong } from './IsLatLong';\nexport var IS_LATITUDE = 'isLatitude';\n/**\n * Checks if a given value is a latitude.\n */\nexport function isLatitude(value) {\n  return (typeof value === 'number' || typeof value === 'string') && isLatLong(\"\".concat(value, \",0\"));\n}\n/**\n * Checks if a given value is a latitude.\n */\nexport function IsLatitude(validationOptions) {\n  return ValidateBy({\n    name: IS_LATITUDE,\n    validator: {\n      validate: function (value, args) {\n        return isLatitude(value);\n      },\n      defaultMessage: buildMessage(function (eachPrefix) {\n        return eachPrefix + '$property must be a latitude string or number';\n      }, validationOptions)\n    }\n  }, validationOptions);\n}","map":{"version":3,"mappings":"AACA,SAASA,YAAY,EAAEC,UAAU,QAAQ,cAAc;AACvD,SAASC,SAAS,QAAQ,aAAa;AAEvC,OAAO,IAAMC,WAAW,GAAG,YAAY;AAEvC;;;AAGA,OAAM,SAAUC,UAAUA,CAACC,KAAa;EACtC,OAAO,CAAC,OAAOA,KAAK,KAAK,QAAQ,IAAI,OAAOA,KAAK,KAAK,QAAQ,KAAKH,SAAS,CAAC,UAAGG,KAAK,OAAI,CAAC;AAC5F;AAEA;;;AAGA,OAAM,SAAUC,UAAUA,CAACC,iBAAqC;EAC9D,OAAON,UAAU,CACf;IACEO,IAAI,EAAEL,WAAW;IACjBM,SAAS,EAAE;MACTC,QAAQ,EAAE,UAACL,KAAK,EAAEM,IAAI;QAAc,iBAAU,CAACN,KAAK,CAAC;MAAjB,CAAiB;MACrDO,cAAc,EAAEZ,YAAY,CAC1B,oBAAU;QAAI,iBAAU,GAAG,+CAA+C;MAA5D,CAA4D,EAC1EO,iBAAiB;;GAGtB,EACDA,iBAAiB,CAClB;AACH","names":["buildMessage","ValidateBy","isLatLong","IS_LATITUDE","isLatitude","value","IsLatitude","validationOptions","name","validator","validate","args","defaultMessage"],"sourceRoot":"","sources":["../../../../src/decorator/common/IsLatitude.ts"],"sourcesContent":["import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from './ValidateBy';\nimport { isLatLong } from './IsLatLong';\n\nexport const IS_LATITUDE = 'isLatitude';\n\n/**\n * Checks if a given value is a latitude.\n */\nexport function isLatitude(value: string): boolean {\n  return (typeof value === 'number' || typeof value === 'string') && isLatLong(`${value},0`);\n}\n\n/**\n * Checks if a given value is a latitude.\n */\nexport function IsLatitude(validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_LATITUDE,\n      validator: {\n        validate: (value, args): boolean => isLatitude(value),\n        defaultMessage: buildMessage(\n          eachPrefix => eachPrefix + '$property must be a latitude string or number',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n"]},"metadata":{},"sourceType":"module"}