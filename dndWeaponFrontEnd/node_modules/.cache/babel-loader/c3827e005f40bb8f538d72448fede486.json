{"ast":null,"code":"import { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isDivisibleByValidator from 'validator/lib/isDivisibleBy';\nexport var IS_DIVISIBLE_BY = 'isDivisibleBy';\n/**\n * Checks if value is a number that's divisible by another.\n */\nexport function isDivisibleBy(value, num) {\n  return typeof value === 'number' && typeof num === 'number' && isDivisibleByValidator(String(value), num);\n}\n/**\n * Checks if value is a number that's divisible by another.\n */\nexport function IsDivisibleBy(num, validationOptions) {\n  return ValidateBy({\n    name: IS_DIVISIBLE_BY,\n    constraints: [num],\n    validator: {\n      validate: function (value, args) {\n        return isDivisibleBy(value, args === null || args === void 0 ? void 0 : args.constraints[0]);\n      },\n      defaultMessage: buildMessage(function (eachPrefix) {\n        return eachPrefix + '$property must be divisible by $constraint1';\n      }, validationOptions)\n    }\n  }, validationOptions);\n}","map":{"version":3,"mappings":"AACA,SAASA,YAAY,EAAEC,UAAU,QAAQ,sBAAsB;AAC/D,OAAOC,sBAAsB,MAAM,6BAA6B;AAEhE,OAAO,IAAMC,eAAe,GAAG,eAAe;AAE9C;;;AAGA,OAAM,SAAUC,aAAaA,CAACC,KAAc,EAAEC,GAAW;EACvD,OAAO,OAAOD,KAAK,KAAK,QAAQ,IAAI,OAAOC,GAAG,KAAK,QAAQ,IAAIJ,sBAAsB,CAACK,MAAM,CAACF,KAAK,CAAC,EAAEC,GAAG,CAAC;AAC3G;AAEA;;;AAGA,OAAM,SAAUE,aAAaA,CAACF,GAAW,EAAEG,iBAAqC;EAC9E,OAAOR,UAAU,CACf;IACES,IAAI,EAAEP,eAAe;IACrBQ,WAAW,EAAE,CAACL,GAAG,CAAC;IAClBM,SAAS,EAAE;MACTC,QAAQ,EAAE,UAACR,KAAK,EAAES,IAAI;QAAc,oBAAa,CAACT,KAAK,EAAES,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEH,WAAW,CAAC,CAAC,CAAC,CAAC;MAA1C,CAA0C;MAC9EI,cAAc,EAAEf,YAAY,CAC1B,oBAAU;QAAI,iBAAU,GAAG,6CAA6C;MAA1D,CAA0D,EACxES,iBAAiB;;GAGtB,EACDA,iBAAiB,CAClB;AACH","names":["buildMessage","ValidateBy","isDivisibleByValidator","IS_DIVISIBLE_BY","isDivisibleBy","value","num","String","IsDivisibleBy","validationOptions","name","constraints","validator","validate","args","defaultMessage"],"sourceRoot":"","sources":["../../../../src/decorator/number/IsDivisibleBy.ts"],"sourcesContent":["import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isDivisibleByValidator from 'validator/lib/isDivisibleBy';\n\nexport const IS_DIVISIBLE_BY = 'isDivisibleBy';\n\n/**\n * Checks if value is a number that's divisible by another.\n */\nexport function isDivisibleBy(value: unknown, num: number): boolean {\n  return typeof value === 'number' && typeof num === 'number' && isDivisibleByValidator(String(value), num);\n}\n\n/**\n * Checks if value is a number that's divisible by another.\n */\nexport function IsDivisibleBy(num: number, validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_DIVISIBLE_BY,\n      constraints: [num],\n      validator: {\n        validate: (value, args): boolean => isDivisibleBy(value, args?.constraints[0]),\n        defaultMessage: buildMessage(\n          eachPrefix => eachPrefix + '$property must be divisible by $constraint1',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n"]},"metadata":{},"sourceType":"module"}