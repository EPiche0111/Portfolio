{"ast":null,"code":"import { ValidationTypes } from '../../validation/ValidationTypes';\nimport { ValidationMetadata } from '../../metadata/ValidationMetadata';\nimport { getMetadataStorage } from '../../metadata/MetadataStorage';\n/**\n * Checks if value is missing and if so, ignores all validators.\n */\nexport function IsOptional(validationOptions) {\n  return function (object, propertyName) {\n    var args = {\n      type: ValidationTypes.CONDITIONAL_VALIDATION,\n      target: object.constructor,\n      propertyName: propertyName,\n      constraints: [function (object, value) {\n        return object[propertyName] !== null && object[propertyName] !== undefined;\n      }],\n      validationOptions: validationOptions\n    };\n    getMetadataStorage().addValidationMetadata(new ValidationMetadata(args));\n  };\n}","map":{"version":3,"mappings":"AAEA,SAASA,eAAe,QAAQ,kCAAkC;AAClE,SAASC,kBAAkB,QAAQ,mCAAmC;AACtE,SAASC,kBAAkB,QAAQ,gCAAgC;AAEnE;;;AAGA,OAAM,SAAUC,UAAUA,CAACC,iBAAqC;EAC9D,OAAO,UAAUC,MAAc,EAAEC,YAAoB;IACnD,IAAMC,IAAI,GAA2B;MACnCC,IAAI,EAAER,eAAe,CAACS,sBAAsB;MAC5CC,MAAM,EAAEL,MAAM,CAACM,WAAW;MAC1BL,YAAY,EAAEA,YAAY;MAC1BM,WAAW,EAAE,CACX,UAACP,MAAW,EAAEQ,KAAU;QACtB,OAAOR,MAAM,CAACC,YAAY,CAAC,KAAK,IAAI,IAAID,MAAM,CAACC,YAAY,CAAC,KAAKQ,SAAS;MAC5E,CAAC,CACF;MACDV,iBAAiB,EAAEA;KACpB;IACDF,kBAAkB,EAAE,CAACa,qBAAqB,CAAC,IAAId,kBAAkB,CAACM,IAAI,CAAC,CAAC;EAC1E,CAAC;AACH","names":["ValidationTypes","ValidationMetadata","getMetadataStorage","IsOptional","validationOptions","object","propertyName","args","type","CONDITIONAL_VALIDATION","target","constructor","constraints","value","undefined","addValidationMetadata"],"sourceRoot":"","sources":["../../../../src/decorator/common/IsOptional.ts"],"sourcesContent":["import { ValidationOptions } from '../ValidationOptions';\nimport { ValidationMetadataArgs } from '../../metadata/ValidationMetadataArgs';\nimport { ValidationTypes } from '../../validation/ValidationTypes';\nimport { ValidationMetadata } from '../../metadata/ValidationMetadata';\nimport { getMetadataStorage } from '../../metadata/MetadataStorage';\n\n/**\n * Checks if value is missing and if so, ignores all validators.\n */\nexport function IsOptional(validationOptions?: ValidationOptions): PropertyDecorator {\n  return function (object: object, propertyName: string): void {\n    const args: ValidationMetadataArgs = {\n      type: ValidationTypes.CONDITIONAL_VALIDATION,\n      target: object.constructor,\n      propertyName: propertyName,\n      constraints: [\n        (object: any, value: any): boolean => {\n          return object[propertyName] !== null && object[propertyName] !== undefined;\n        },\n      ],\n      validationOptions: validationOptions,\n    };\n    getMetadataStorage().addValidationMetadata(new ValidationMetadata(args));\n  };\n}\n"]},"metadata":{},"sourceType":"module"}