{"ast":null,"code":"import { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport { isObject } from '../typechecker/IsObject';\nexport var IS_NOT_EMPTY_OBJECT = 'isNotEmptyObject';\n/**\n * Checks if the value is valid Object & not empty.\n * Returns false if the value is not an object or an empty valid object.\n */\nexport function isNotEmptyObject(value, options) {\n  if (!isObject(value)) {\n    return false;\n  }\n  if ((options === null || options === void 0 ? void 0 : options.nullable) === true) {\n    return !Object.values(value).every(function (propertyValue) {\n      return propertyValue === null || propertyValue === undefined;\n    });\n  }\n  for (var key in value) {\n    if (value.hasOwnProperty(key)) {\n      return true;\n    }\n  }\n  return false;\n}\n/**\n * Checks if the value is valid Object & not empty.\n * Returns false if the value is not an object or an empty valid object.\n */\nexport function IsNotEmptyObject(options, validationOptions) {\n  return ValidateBy({\n    name: IS_NOT_EMPTY_OBJECT,\n    constraints: [options],\n    validator: {\n      validate: function (value, args) {\n        return isNotEmptyObject(value, args === null || args === void 0 ? void 0 : args.constraints[0]);\n      },\n      defaultMessage: buildMessage(function (eachPrefix) {\n        return eachPrefix + '$property must be a non-empty object';\n      }, validationOptions)\n    }\n  }, validationOptions);\n}","map":{"version":3,"mappings":"AACA,SAASA,YAAY,EAAEC,UAAU,QAAQ,sBAAsB;AAC/D,SAASC,QAAQ,QAAQ,yBAAyB;AAElD,OAAO,IAAMC,mBAAmB,GAAG,kBAAkB;AAErD;;;;AAIA,OAAM,SAAUC,gBAAgBA,CAACC,KAAc,EAAEC,OAAgC;EAC/E,IAAI,CAACJ,QAAQ,CAACG,KAAK,CAAC,EAAE;IACpB,OAAO,KAAK;;EAGd,IAAI,QAAO,aAAPC,OAAO,uBAAPA,OAAO,CAAEC,QAAQ,MAAK,IAAI,EAAE;IAC9B,OAAO,CAACC,MAAM,CAACC,MAAM,CAACJ,KAAK,CAAC,CAACK,KAAK,CAAC,uBAAa;MAAI,oBAAa,KAAK,IAAI,IAAIC,aAAa,KAAKC,SAAS;IAArD,CAAqD,CAAC;;EAG5G,KAAK,IAAMC,GAAG,IAAIR,KAAK,EAAE;IACvB,IAAIA,KAAK,CAACS,cAAc,CAACD,GAAG,CAAC,EAAE;MAC7B,OAAO,IAAI;;;EAIf,OAAO,KAAK;AACd;AAEA;;;;AAIA,OAAM,SAAUE,gBAAgBA,CAC9BT,OAAgC,EAChCU,iBAAqC;EAErC,OAAOf,UAAU,CACf;IACEgB,IAAI,EAAEd,mBAAmB;IACzBe,WAAW,EAAE,CAACZ,OAAO,CAAC;IACtBa,SAAS,EAAE;MACTC,QAAQ,EAAE,UAACf,KAAK,EAAEgB,IAAI;QAAc,uBAAgB,CAAChB,KAAK,EAAEgB,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEH,WAAW,CAAC,CAAC,CAAC,CAAC;MAA7C,CAA6C;MACjFI,cAAc,EAAEtB,YAAY,CAC1B,oBAAU;QAAI,iBAAU,GAAG,sCAAsC;MAAnD,CAAmD,EACjEgB,iBAAiB;;GAGtB,EACDA,iBAAiB,CAClB;AACH","names":["buildMessage","ValidateBy","isObject","IS_NOT_EMPTY_OBJECT","isNotEmptyObject","value","options","nullable","Object","values","every","propertyValue","undefined","key","hasOwnProperty","IsNotEmptyObject","validationOptions","name","constraints","validator","validate","args","defaultMessage"],"sourceRoot":"","sources":["../../../../src/decorator/object/IsNotEmptyObject.ts"],"sourcesContent":["import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport { isObject } from '../typechecker/IsObject';\n\nexport const IS_NOT_EMPTY_OBJECT = 'isNotEmptyObject';\n\n/**\n * Checks if the value is valid Object & not empty.\n * Returns false if the value is not an object or an empty valid object.\n */\nexport function isNotEmptyObject(value: unknown, options?: { nullable?: boolean }): boolean {\n  if (!isObject(value)) {\n    return false;\n  }\n\n  if (options?.nullable === true) {\n    return !Object.values(value).every(propertyValue => propertyValue === null || propertyValue === undefined);\n  }\n\n  for (const key in value) {\n    if (value.hasOwnProperty(key)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n/**\n * Checks if the value is valid Object & not empty.\n * Returns false if the value is not an object or an empty valid object.\n */\nexport function IsNotEmptyObject(\n  options?: { nullable?: boolean },\n  validationOptions?: ValidationOptions\n): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_NOT_EMPTY_OBJECT,\n      constraints: [options],\n      validator: {\n        validate: (value, args): boolean => isNotEmptyObject(value, args?.constraints[0]),\n        defaultMessage: buildMessage(\n          eachPrefix => eachPrefix + '$property must be a non-empty object',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n"]},"metadata":{},"sourceType":"module"}