{"ast":null,"code":"import { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isPostalCodeValidator from 'validator/lib/isPostalCode';\nexport var IS_POSTAL_CODE = 'isPostalCode';\n/**\n * Check if the string is a postal code, in the specified locale.\n * If given value is not a string, then it returns false.\n */\nexport function isPostalCode(value, locale) {\n  return typeof value === 'string' && isPostalCodeValidator(value, locale);\n}\n/**\n * Check if the string is a postal code, in the specified locale.\n * If given value is not a string, then it returns false.\n */\nexport function IsPostalCode(locale, validationOptions) {\n  return ValidateBy({\n    name: IS_POSTAL_CODE,\n    constraints: [locale],\n    validator: {\n      validate: function (value, args) {\n        return isPostalCode(value, args === null || args === void 0 ? void 0 : args.constraints[0]);\n      },\n      defaultMessage: buildMessage(function (eachPrefix) {\n        return eachPrefix + '$property must be a postal code';\n      }, validationOptions)\n    }\n  }, validationOptions);\n}","map":{"version":3,"mappings":"AACA,SAASA,YAAY,EAAEC,UAAU,QAAQ,sBAAsB;AAC/D,OAAOC,qBAAqB,MAAM,4BAA4B;AAG9D,OAAO,IAAMC,cAAc,GAAG,cAAc;AAE5C;;;;AAIA,OAAM,SAAUC,YAAYA,CAACC,KAAc,EAAEC,MAA4C;EACvF,OAAO,OAAOD,KAAK,KAAK,QAAQ,IAAIH,qBAAqB,CAACG,KAAK,EAAEC,MAAM,CAAC;AAC1E;AAEA;;;;AAIA,OAAM,SAAUC,YAAYA,CAC1BD,MAA6C,EAC7CE,iBAAqC;EAErC,OAAOP,UAAU,CACf;IACEQ,IAAI,EAAEN,cAAc;IACpBO,WAAW,EAAE,CAACJ,MAAM,CAAC;IACrBK,SAAS,EAAE;MACTC,QAAQ,EAAE,UAACP,KAAK,EAAEQ,IAAI;QAAc,mBAAY,CAACR,KAAK,EAAEQ,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEH,WAAW,CAAC,CAAC,CAAC,CAAC;MAAzC,CAAyC;MAC7EI,cAAc,EAAEd,YAAY,CAAC,oBAAU;QAAI,iBAAU,GAAG,iCAAiC;MAA9C,CAA8C,EAAEQ,iBAAiB;;GAE/G,EACDA,iBAAiB,CAClB;AACH","names":["buildMessage","ValidateBy","isPostalCodeValidator","IS_POSTAL_CODE","isPostalCode","value","locale","IsPostalCode","validationOptions","name","constraints","validator","validate","args","defaultMessage"],"sourceRoot":"","sources":["../../../../src/decorator/string/IsPostalCode.ts"],"sourcesContent":["import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isPostalCodeValidator from 'validator/lib/isPostalCode';\nimport ValidatorJS from 'validator';\n\nexport const IS_POSTAL_CODE = 'isPostalCode';\n\n/**\n * Check if the string is a postal code, in the specified locale.\n * If given value is not a string, then it returns false.\n */\nexport function isPostalCode(value: unknown, locale: 'any' | ValidatorJS.PostalCodeLocale): boolean {\n  return typeof value === 'string' && isPostalCodeValidator(value, locale);\n}\n\n/**\n * Check if the string is a postal code, in the specified locale.\n * If given value is not a string, then it returns false.\n */\nexport function IsPostalCode(\n  locale?: 'any' | ValidatorJS.PostalCodeLocale,\n  validationOptions?: ValidationOptions\n): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_POSTAL_CODE,\n      constraints: [locale],\n      validator: {\n        validate: (value, args): boolean => isPostalCode(value, args?.constraints[0]),\n        defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be a postal code', validationOptions),\n      },\n    },\n    validationOptions\n  );\n}\n"]},"metadata":{},"sourceType":"module"}