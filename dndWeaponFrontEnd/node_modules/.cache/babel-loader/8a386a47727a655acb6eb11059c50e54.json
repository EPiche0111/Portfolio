{"ast":null,"code":"import { buildMessage, ValidateBy } from '../common/ValidateBy';\nexport var NOT_EQUALS = 'notEquals';\n/**\n * Checks if value does not match (\"!==\") the comparison.\n */\nexport function notEquals(value, comparison) {\n  return value !== comparison;\n}\n/**\n * Checks if value does not match (\"!==\") the comparison.\n */\nexport function NotEquals(comparison, validationOptions) {\n  return ValidateBy({\n    name: NOT_EQUALS,\n    constraints: [comparison],\n    validator: {\n      validate: function (value, args) {\n        return notEquals(value, args === null || args === void 0 ? void 0 : args.constraints[0]);\n      },\n      defaultMessage: buildMessage(function (eachPrefix) {\n        return eachPrefix + '$property should not be equal to $constraint1';\n      }, validationOptions)\n    }\n  }, validationOptions);\n}","map":{"version":3,"mappings":"AACA,SAASA,YAAY,EAAEC,UAAU,QAAQ,sBAAsB;AAE/D,OAAO,IAAMC,UAAU,GAAG,WAAW;AAErC;;;AAGA,OAAM,SAAUC,SAASA,CAACC,KAAc,EAAEC,UAAmB;EAC3D,OAAOD,KAAK,KAAKC,UAAU;AAC7B;AAEA;;;AAGA,OAAM,SAAUC,SAASA,CAACD,UAAe,EAAEE,iBAAqC;EAC9E,OAAON,UAAU,CACf;IACEO,IAAI,EAAEN,UAAU;IAChBO,WAAW,EAAE,CAACJ,UAAU,CAAC;IACzBK,SAAS,EAAE;MACTC,QAAQ,EAAE,UAACP,KAAK,EAAEQ,IAAI;QAAc,gBAAS,CAACR,KAAK,EAAEQ,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEH,WAAW,CAAC,CAAC,CAAC,CAAC;MAAtC,CAAsC;MAC1EI,cAAc,EAAEb,YAAY,CAC1B,oBAAU;QAAI,iBAAU,GAAG,+CAA+C;MAA5D,CAA4D,EAC1EO,iBAAiB;;GAGtB,EACDA,iBAAiB,CAClB;AACH","names":["buildMessage","ValidateBy","NOT_EQUALS","notEquals","value","comparison","NotEquals","validationOptions","name","constraints","validator","validate","args","defaultMessage"],"sourceRoot":"","sources":["../../../../src/decorator/common/NotEquals.ts"],"sourcesContent":["import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\n\nexport const NOT_EQUALS = 'notEquals';\n\n/**\n * Checks if value does not match (\"!==\") the comparison.\n */\nexport function notEquals(value: unknown, comparison: unknown): boolean {\n  return value !== comparison;\n}\n\n/**\n * Checks if value does not match (\"!==\") the comparison.\n */\nexport function NotEquals(comparison: any, validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: NOT_EQUALS,\n      constraints: [comparison],\n      validator: {\n        validate: (value, args): boolean => notEquals(value, args?.constraints[0]),\n        defaultMessage: buildMessage(\n          eachPrefix => eachPrefix + '$property should not be equal to $constraint1',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n"]},"metadata":{},"sourceType":"module"}