{"ast":null,"code":"import { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isBase64Validator from 'validator/lib/isBase64';\nexport var IS_BASE64 = 'isBase64';\n/**\n * Checks if a string is base64 encoded.\n * If given value is not a string, then it returns false.\n */\nexport function isBase64(value) {\n  return typeof value === 'string' && isBase64Validator(value);\n}\n/**\n * Checks if a string is base64 encoded.\n * If given value is not a string, then it returns false.\n */\nexport function IsBase64(validationOptions) {\n  return ValidateBy({\n    name: IS_BASE64,\n    validator: {\n      validate: function (value, args) {\n        return isBase64(value);\n      },\n      defaultMessage: buildMessage(function (eachPrefix) {\n        return eachPrefix + '$property must be base64 encoded';\n      }, validationOptions)\n    }\n  }, validationOptions);\n}","map":{"version":3,"mappings":"AACA,SAASA,YAAY,EAAEC,UAAU,QAAQ,sBAAsB;AAC/D,OAAOC,iBAAiB,MAAM,wBAAwB;AAEtD,OAAO,IAAMC,SAAS,GAAG,UAAU;AAEnC;;;;AAIA,OAAM,SAAUC,QAAQA,CAACC,KAAc;EACrC,OAAO,OAAOA,KAAK,KAAK,QAAQ,IAAIH,iBAAiB,CAACG,KAAK,CAAC;AAC9D;AAEA;;;;AAIA,OAAM,SAAUC,QAAQA,CAACC,iBAAqC;EAC5D,OAAON,UAAU,CACf;IACEO,IAAI,EAAEL,SAAS;IACfM,SAAS,EAAE;MACTC,QAAQ,EAAE,UAACL,KAAK,EAAEM,IAAI;QAAc,eAAQ,CAACN,KAAK,CAAC;MAAf,CAAe;MACnDO,cAAc,EAAEZ,YAAY,CAAC,oBAAU;QAAI,iBAAU,GAAG,kCAAkC;MAA/C,CAA+C,EAAEO,iBAAiB;;GAEhH,EACDA,iBAAiB,CAClB;AACH","names":["buildMessage","ValidateBy","isBase64Validator","IS_BASE64","isBase64","value","IsBase64","validationOptions","name","validator","validate","args","defaultMessage"],"sourceRoot":"","sources":["../../../../src/decorator/string/IsBase64.ts"],"sourcesContent":["import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isBase64Validator from 'validator/lib/isBase64';\n\nexport const IS_BASE64 = 'isBase64';\n\n/**\n * Checks if a string is base64 encoded.\n * If given value is not a string, then it returns false.\n */\nexport function isBase64(value: unknown): boolean {\n  return typeof value === 'string' && isBase64Validator(value);\n}\n\n/**\n * Checks if a string is base64 encoded.\n * If given value is not a string, then it returns false.\n */\nexport function IsBase64(validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_BASE64,\n      validator: {\n        validate: (value, args): boolean => isBase64(value),\n        defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be base64 encoded', validationOptions),\n      },\n    },\n    validationOptions\n  );\n}\n"]},"metadata":{},"sourceType":"module"}