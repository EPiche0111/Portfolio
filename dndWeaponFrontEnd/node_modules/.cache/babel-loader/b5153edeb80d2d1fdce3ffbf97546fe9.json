{"ast":null,"code":"import { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isLengthValidator from 'validator/lib/isLength';\nexport var MAX_LENGTH = 'maxLength';\n/**\n * Checks if the string's length is not more than given number. Note: this function takes into account surrogate pairs.\n * If given value is not a string, then it returns false.\n */\nexport function maxLength(value, max) {\n  return typeof value === 'string' && isLengthValidator(value, {\n    min: 0,\n    max: max\n  });\n}\n/**\n * Checks if the string's length is not more than given number. Note: this function takes into account surrogate pairs.\n * If given value is not a string, then it returns false.\n */\nexport function MaxLength(max, validationOptions) {\n  return ValidateBy({\n    name: MAX_LENGTH,\n    constraints: [max],\n    validator: {\n      validate: function (value, args) {\n        return maxLength(value, args === null || args === void 0 ? void 0 : args.constraints[0]);\n      },\n      defaultMessage: buildMessage(function (eachPrefix) {\n        return eachPrefix + '$property must be shorter than or equal to $constraint1 characters';\n      }, validationOptions)\n    }\n  }, validationOptions);\n}","map":{"version":3,"mappings":"AACA,SAASA,YAAY,EAAEC,UAAU,QAAQ,sBAAsB;AAC/D,OAAOC,iBAAiB,MAAM,wBAAwB;AAEtD,OAAO,IAAMC,UAAU,GAAG,WAAW;AAErC;;;;AAIA,OAAM,SAAUC,SAASA,CAACC,KAAc,EAAEC,GAAW;EACnD,OAAO,OAAOD,KAAK,KAAK,QAAQ,IAAIH,iBAAiB,CAACG,KAAK,EAAE;IAAEE,GAAG,EAAE,CAAC;IAAED,GAAG;EAAA,CAAE,CAAC;AAC/E;AAEA;;;;AAIA,OAAM,SAAUE,SAASA,CAACF,GAAW,EAAEG,iBAAqC;EAC1E,OAAOR,UAAU,CACf;IACES,IAAI,EAAEP,UAAU;IAChBQ,WAAW,EAAE,CAACL,GAAG,CAAC;IAClBM,SAAS,EAAE;MACTC,QAAQ,EAAE,UAACR,KAAK,EAAES,IAAI;QAAc,gBAAS,CAACT,KAAK,EAAES,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEH,WAAW,CAAC,CAAC,CAAC,CAAC;MAAtC,CAAsC;MAC1EI,cAAc,EAAEf,YAAY,CAC1B,oBAAU;QAAI,iBAAU,GAAG,oEAAoE;MAAjF,CAAiF,EAC/FS,iBAAiB;;GAGtB,EACDA,iBAAiB,CAClB;AACH","names":["buildMessage","ValidateBy","isLengthValidator","MAX_LENGTH","maxLength","value","max","min","MaxLength","validationOptions","name","constraints","validator","validate","args","defaultMessage"],"sourceRoot":"","sources":["../../../../src/decorator/string/MaxLength.ts"],"sourcesContent":["import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isLengthValidator from 'validator/lib/isLength';\n\nexport const MAX_LENGTH = 'maxLength';\n\n/**\n * Checks if the string's length is not more than given number. Note: this function takes into account surrogate pairs.\n * If given value is not a string, then it returns false.\n */\nexport function maxLength(value: unknown, max: number): boolean {\n  return typeof value === 'string' && isLengthValidator(value, { min: 0, max });\n}\n\n/**\n * Checks if the string's length is not more than given number. Note: this function takes into account surrogate pairs.\n * If given value is not a string, then it returns false.\n */\nexport function MaxLength(max: number, validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: MAX_LENGTH,\n      constraints: [max],\n      validator: {\n        validate: (value, args): boolean => maxLength(value, args?.constraints[0]),\n        defaultMessage: buildMessage(\n          eachPrefix => eachPrefix + '$property must be shorter than or equal to $constraint1 characters',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n"]},"metadata":{},"sourceType":"module"}