{"ast":null,"code":"import { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport { isISO8601 } from './IsISO8601';\nexport var IS_DATE_STRING = 'isDateString';\n/**\n * Alias for IsISO8601 validator\n */\nexport function isDateString(value, options) {\n  return isISO8601(value, options);\n}\n/**\n * Alias for IsISO8601 validator\n */\nexport function IsDateString(options, validationOptions) {\n  return ValidateBy({\n    name: IS_DATE_STRING,\n    constraints: [options],\n    validator: {\n      validate: function (value) {\n        return isDateString(value, options);\n      },\n      defaultMessage: buildMessage(function (eachPrefix) {\n        return eachPrefix + '$property must be a valid ISO 8601 date string';\n      }, validationOptions)\n    }\n  }, validationOptions);\n}","map":{"version":3,"mappings":"AACA,SAASA,YAAY,EAAEC,UAAU,QAAQ,sBAAsB;AAE/D,SAASC,SAAS,QAAQ,aAAa;AAEvC,OAAO,IAAMC,cAAc,GAAG,cAAc;AAE5C;;;AAGA,OAAM,SAAUC,YAAYA,CAACC,KAAc,EAAEC,OAAsC;EACjF,OAAOJ,SAAS,CAACG,KAAK,EAAEC,OAAO,CAAC;AAClC;AAEA;;;AAGA,OAAM,SAAUC,YAAYA,CAC1BD,OAAsC,EACtCE,iBAAqC;EAErC,OAAOP,UAAU,CACf;IACEQ,IAAI,EAAEN,cAAc;IACpBO,WAAW,EAAE,CAACJ,OAAO,CAAC;IACtBK,SAAS,EAAE;MACTC,QAAQ,EAAE,UAACP,KAAK;QAAc,mBAAY,CAACA,KAAK,EAAEC,OAAO,CAAC;MAA5B,CAA4B;MAC1DO,cAAc,EAAEb,YAAY,CAC1B,oBAAU;QAAI,iBAAU,GAAG,gDAAgD;MAA7D,CAA6D,EAC3EQ,iBAAiB;;GAGtB,EACDA,iBAAiB,CAClB;AACH","names":["buildMessage","ValidateBy","isISO8601","IS_DATE_STRING","isDateString","value","options","IsDateString","validationOptions","name","constraints","validator","validate","defaultMessage"],"sourceRoot":"","sources":["../../../../src/decorator/string/IsDateString.ts"],"sourcesContent":["import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport ValidatorJS from 'validator';\nimport { isISO8601 } from './IsISO8601';\n\nexport const IS_DATE_STRING = 'isDateString';\n\n/**\n * Alias for IsISO8601 validator\n */\nexport function isDateString(value: unknown, options?: ValidatorJS.IsISO8601Options): boolean {\n  return isISO8601(value, options);\n}\n\n/**\n * Alias for IsISO8601 validator\n */\nexport function IsDateString(\n  options?: ValidatorJS.IsISO8601Options,\n  validationOptions?: ValidationOptions\n): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_DATE_STRING,\n      constraints: [options],\n      validator: {\n        validate: (value): boolean => isDateString(value, options),\n        defaultMessage: buildMessage(\n          eachPrefix => eachPrefix + '$property must be a valid ISO 8601 date string',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n"]},"metadata":{},"sourceType":"module"}