{"ast":null,"code":"import { buildMessage, ValidateBy } from '../common/ValidateBy';\nexport var IS_DATE = 'isDate';\n/**\n * Checks if a given value is a date.\n */\nexport function isDate(value) {\n  return value instanceof Date && !isNaN(value.getTime());\n}\n/**\n * Checks if a value is a date.\n */\nexport function IsDate(validationOptions) {\n  return ValidateBy({\n    name: IS_DATE,\n    validator: {\n      validate: function (value, args) {\n        return isDate(value);\n      },\n      defaultMessage: buildMessage(function (eachPrefix) {\n        return eachPrefix + '$property must be a Date instance';\n      }, validationOptions)\n    }\n  }, validationOptions);\n}","map":{"version":3,"mappings":"AACA,SAASA,YAAY,EAAEC,UAAU,QAAQ,sBAAsB;AAE/D,OAAO,IAAMC,OAAO,GAAG,QAAQ;AAE/B;;;AAGA,OAAM,SAAUC,MAAMA,CAACC,KAAc;EACnC,OAAOA,KAAK,YAAYC,IAAI,IAAI,CAACC,KAAK,CAACF,KAAK,CAACG,OAAO,EAAE,CAAC;AACzD;AAEA;;;AAGA,OAAM,SAAUC,MAAMA,CAACC,iBAAqC;EAC1D,OAAOR,UAAU,CACf;IACES,IAAI,EAAER,OAAO;IACbS,SAAS,EAAE;MACTC,QAAQ,EAAE,UAACR,KAAK,EAAES,IAAI;QAAc,aAAM,CAACT,KAAK,CAAC;MAAb,CAAa;MACjDU,cAAc,EAAEd,YAAY,CAAC,oBAAU;QAAI,iBAAU,GAAG,mCAAmC;MAAhD,CAAgD,EAAES,iBAAiB;;GAEjH,EACDA,iBAAiB,CAClB;AACH","names":["buildMessage","ValidateBy","IS_DATE","isDate","value","Date","isNaN","getTime","IsDate","validationOptions","name","validator","validate","args","defaultMessage"],"sourceRoot":"","sources":["../../../../src/decorator/typechecker/IsDate.ts"],"sourcesContent":["import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\n\nexport const IS_DATE = 'isDate';\n\n/**\n * Checks if a given value is a date.\n */\nexport function isDate(value: unknown): value is Date {\n  return value instanceof Date && !isNaN(value.getTime());\n}\n\n/**\n * Checks if a value is a date.\n */\nexport function IsDate(validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_DATE,\n      validator: {\n        validate: (value, args): boolean => isDate(value),\n        defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be a Date instance', validationOptions),\n      },\n    },\n    validationOptions\n  );\n}\n"]},"metadata":{},"sourceType":"module"}