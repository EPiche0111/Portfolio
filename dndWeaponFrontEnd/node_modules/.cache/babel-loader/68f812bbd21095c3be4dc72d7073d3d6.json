{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * Container to be used by this library for inversion control. If container was not implicitly set then by default\n * container simply creates a new instance of the given class.\n */\nvar defaultContainer = new ( /** @class */function () {\n  function class_1() {\n    this.instances = [];\n  }\n  class_1.prototype.get = function (someClass) {\n    var instance = this.instances.find(function (instance) {\n      return instance.type === someClass;\n    });\n    if (!instance) {\n      instance = {\n        type: someClass,\n        object: new someClass()\n      };\n      this.instances.push(instance);\n    }\n    return instance.object;\n  };\n  return class_1;\n}())();\nvar userContainer;\nvar userContainerOptions;\n/**\n * Sets container to be used by this library.\n */\nexport function useContainer(iocContainer, options) {\n  userContainer = iocContainer;\n  userContainerOptions = options;\n}\n/**\n * Gets the IOC container used by this library.\n */\nexport function getFromContainer(someClass) {\n  if (userContainer) {\n    try {\n      var instance = userContainer.get(someClass);\n      if (instance) return instance;\n      if (!userContainerOptions || !userContainerOptions.fallback) return instance;\n    } catch (error) {\n      if (!userContainerOptions || !userContainerOptions.fallbackOnErrors) throw error;\n    }\n  }\n  return defaultContainer.get(someClass);\n}","map":{"version":3,"mappings":";AAeA;;;;AAIA,IAAMA,gBAAgB,GAAqE,MAAI;EAAC;IACtF,cAAS,GAAsC,EAAE;EAU3D;EATEC,qBAAG,GAAH,UAAOC,SAAsC;IAC3C,IAAIC,QAAQ,GAAG,IAAI,CAACC,SAAS,CAACC,IAAI,CAAC,kBAAQ;MAAI,eAAQ,CAACC,IAAI,KAAKJ,SAAS;IAA3B,CAA2B,CAAC;IAC3E,IAAI,CAACC,QAAQ,EAAE;MACbA,QAAQ,GAAG;QAAEG,IAAI,EAAEJ,SAAS;QAAEK,MAAM,EAAE,IAAIL,SAAS;MAAE,CAAE;MACvD,IAAI,CAACE,SAAS,CAACI,IAAI,CAACL,QAAQ,CAAC;;IAG/B,OAAOA,QAAQ,CAACI,MAAM;EACxB,CAAC;EACH,cAAC;AAAD,CAAC,CAX+F,GAW9F,CAAE;AAEJ,IAAIE,aAA+E;AACnF,IAAIC,oBAAyC;AAE7C;;;AAGA,OAAM,SAAUC,YAAYA,CAACC,YAA0C,EAAEC,OAA6B;EACpGJ,aAAa,GAAGG,YAAY;EAC5BF,oBAAoB,GAAGG,OAAO;AAChC;AAEA;;;AAGA,OAAM,SAAUC,gBAAgBA,CAAIZ,SAAiD;EACnF,IAAIO,aAAa,EAAE;IACjB,IAAI;MACF,IAAMN,QAAQ,GAAGM,aAAa,CAACM,GAAG,CAACb,SAAS,CAAC;MAC7C,IAAIC,QAAQ,EAAE,OAAOA,QAAQ;MAE7B,IAAI,CAACO,oBAAoB,IAAI,CAACA,oBAAoB,CAACM,QAAQ,EAAE,OAAOb,QAAQ;KAC7E,CAAC,OAAOc,KAAK,EAAE;MACd,IAAI,CAACP,oBAAoB,IAAI,CAACA,oBAAoB,CAACQ,gBAAgB,EAAE,MAAMD,KAAK;;;EAGpF,OAAOjB,gBAAgB,CAACe,GAAG,CAAIb,SAAS,CAAC;AAC3C","names":["defaultContainer","class_1","someClass","instance","instances","find","type","object","push","userContainer","userContainerOptions","useContainer","iocContainer","options","getFromContainer","get","fallback","error","fallbackOnErrors"],"sourceRoot":"","sources":["../../src/container.ts"],"sourcesContent":["/**\n * Container options.\n */\nexport interface UseContainerOptions {\n  /**\n   * If set to true, then default container will be used in the case if given container haven't returned anything.\n   */\n  fallback?: boolean;\n\n  /**\n   * If set to true, then default container will be used in the case if given container thrown an exception.\n   */\n  fallbackOnErrors?: boolean;\n}\n\n/**\n * Container to be used by this library for inversion control. If container was not implicitly set then by default\n * container simply creates a new instance of the given class.\n */\nconst defaultContainer: { get<T>(someClass: { new (...args: any[]): T } | Function): T } = new (class {\n  private instances: { type: Function; object: any }[] = [];\n  get<T>(someClass: { new (...args: any[]): T }): T {\n    let instance = this.instances.find(instance => instance.type === someClass);\n    if (!instance) {\n      instance = { type: someClass, object: new someClass() };\n      this.instances.push(instance);\n    }\n\n    return instance.object;\n  }\n})();\n\nlet userContainer: { get<T>(someClass: { new (...args: any[]): T } | Function): T };\nlet userContainerOptions: UseContainerOptions;\n\n/**\n * Sets container to be used by this library.\n */\nexport function useContainer(iocContainer: { get(someClass: any): any }, options?: UseContainerOptions): void {\n  userContainer = iocContainer;\n  userContainerOptions = options;\n}\n\n/**\n * Gets the IOC container used by this library.\n */\nexport function getFromContainer<T>(someClass: { new (...args: any[]): T } | Function): T {\n  if (userContainer) {\n    try {\n      const instance = userContainer.get(someClass);\n      if (instance) return instance;\n\n      if (!userContainerOptions || !userContainerOptions.fallback) return instance;\n    } catch (error) {\n      if (!userContainerOptions || !userContainerOptions.fallbackOnErrors) throw error;\n    }\n  }\n  return defaultContainer.get<T>(someClass);\n}\n"]},"metadata":{},"sourceType":"module"}