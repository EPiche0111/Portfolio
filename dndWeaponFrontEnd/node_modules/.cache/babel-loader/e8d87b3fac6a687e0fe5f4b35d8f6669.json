{"ast":null,"code":"import { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isCurrencyValidator from 'validator/lib/isCurrency';\nexport var IS_CURRENCY = 'isCurrency';\n/**\n * Checks if the string is a valid currency amount.\n * If given value is not a string, then it returns false.\n */\nexport function isCurrency(value, options) {\n  return typeof value === 'string' && isCurrencyValidator(value, options);\n}\n/**\n * Checks if the string is a valid currency amount.\n * If given value is not a string, then it returns false.\n */\nexport function IsCurrency(options, validationOptions) {\n  return ValidateBy({\n    name: IS_CURRENCY,\n    constraints: [options],\n    validator: {\n      validate: function (value, args) {\n        return isCurrency(value, args === null || args === void 0 ? void 0 : args.constraints[0]);\n      },\n      defaultMessage: buildMessage(function (eachPrefix) {\n        return eachPrefix + '$property must be a currency';\n      }, validationOptions)\n    }\n  }, validationOptions);\n}","map":{"version":3,"mappings":"AACA,SAASA,YAAY,EAAEC,UAAU,QAAQ,sBAAsB;AAC/D,OAAOC,mBAAmB,MAAM,0BAA0B;AAG1D,OAAO,IAAMC,WAAW,GAAG,YAAY;AAEvC;;;;AAIA,OAAM,SAAUC,UAAUA,CAACC,KAAc,EAAEC,OAAuC;EAChF,OAAO,OAAOD,KAAK,KAAK,QAAQ,IAAIH,mBAAmB,CAACG,KAAK,EAAEC,OAAO,CAAC;AACzE;AAEA;;;;AAIA,OAAM,SAAUC,UAAUA,CACxBD,OAAuC,EACvCE,iBAAqC;EAErC,OAAOP,UAAU,CACf;IACEQ,IAAI,EAAEN,WAAW;IACjBO,WAAW,EAAE,CAACJ,OAAO,CAAC;IACtBK,SAAS,EAAE;MACTC,QAAQ,EAAE,UAACP,KAAK,EAAEQ,IAAI;QAAc,iBAAU,CAACR,KAAK,EAAEQ,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEH,WAAW,CAAC,CAAC,CAAC,CAAC;MAAvC,CAAuC;MAC3EI,cAAc,EAAEd,YAAY,CAAC,oBAAU;QAAI,iBAAU,GAAG,8BAA8B;MAA3C,CAA2C,EAAEQ,iBAAiB;;GAE5G,EACDA,iBAAiB,CAClB;AACH","names":["buildMessage","ValidateBy","isCurrencyValidator","IS_CURRENCY","isCurrency","value","options","IsCurrency","validationOptions","name","constraints","validator","validate","args","defaultMessage"],"sourceRoot":"","sources":["../../../../src/decorator/string/IsCurrency.ts"],"sourcesContent":["import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isCurrencyValidator from 'validator/lib/isCurrency';\nimport ValidatorJS from 'validator';\n\nexport const IS_CURRENCY = 'isCurrency';\n\n/**\n * Checks if the string is a valid currency amount.\n * If given value is not a string, then it returns false.\n */\nexport function isCurrency(value: unknown, options?: ValidatorJS.IsCurrencyOptions): boolean {\n  return typeof value === 'string' && isCurrencyValidator(value, options);\n}\n\n/**\n * Checks if the string is a valid currency amount.\n * If given value is not a string, then it returns false.\n */\nexport function IsCurrency(\n  options?: ValidatorJS.IsCurrencyOptions,\n  validationOptions?: ValidationOptions\n): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_CURRENCY,\n      constraints: [options],\n      validator: {\n        validate: (value, args): boolean => isCurrency(value, args?.constraints[0]),\n        defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be a currency', validationOptions),\n      },\n    },\n    validationOptions\n  );\n}\n"]},"metadata":{},"sourceType":"module"}