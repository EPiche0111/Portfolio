{"ast":null,"code":"import { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isUrlValidator from 'validator/lib/isURL';\nexport var IS_URL = 'isUrl';\n/**\n * Checks if the string is a url.\n * If given value is not a string, then it returns false.\n */\nexport function isURL(value, options) {\n  return typeof value === 'string' && isUrlValidator(value, options);\n}\n/**\n * Checks if the string is a url.\n * If given value is not a string, then it returns false.\n */\nexport function IsUrl(options, validationOptions) {\n  return ValidateBy({\n    name: IS_URL,\n    constraints: [options],\n    validator: {\n      validate: function (value, args) {\n        return isURL(value, args === null || args === void 0 ? void 0 : args.constraints[0]);\n      },\n      defaultMessage: buildMessage(function (eachPrefix) {\n        return eachPrefix + '$property must be a URL address';\n      }, validationOptions)\n    }\n  }, validationOptions);\n}","map":{"version":3,"mappings":"AACA,SAASA,YAAY,EAAEC,UAAU,QAAQ,sBAAsB;AAC/D,OAAOC,cAAc,MAAM,qBAAqB;AAGhD,OAAO,IAAMC,MAAM,GAAG,OAAO;AAE7B;;;;AAIA,OAAM,SAAUC,KAAKA,CAACC,KAAa,EAAEC,OAAkC;EACrE,OAAO,OAAOD,KAAK,KAAK,QAAQ,IAAIH,cAAc,CAACG,KAAK,EAAEC,OAAO,CAAC;AACpE;AAEA;;;;AAIA,OAAM,SAAUC,KAAKA,CAACD,OAAkC,EAAEE,iBAAqC;EAC7F,OAAOP,UAAU,CACf;IACEQ,IAAI,EAAEN,MAAM;IACZO,WAAW,EAAE,CAACJ,OAAO,CAAC;IACtBK,SAAS,EAAE;MACTC,QAAQ,EAAE,UAACP,KAAK,EAAEQ,IAAI;QAAc,YAAK,CAACR,KAAK,EAAEQ,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEH,WAAW,CAAC,CAAC,CAAC,CAAC;MAAlC,CAAkC;MACtEI,cAAc,EAAEd,YAAY,CAAC,oBAAU;QAAI,iBAAU,GAAG,iCAAiC;MAA9C,CAA8C,EAAEQ,iBAAiB;;GAE/G,EACDA,iBAAiB,CAClB;AACH","names":["buildMessage","ValidateBy","isUrlValidator","IS_URL","isURL","value","options","IsUrl","validationOptions","name","constraints","validator","validate","args","defaultMessage"],"sourceRoot":"","sources":["../../../../src/decorator/string/IsUrl.ts"],"sourcesContent":["import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isUrlValidator from 'validator/lib/isURL';\nimport ValidatorJS from 'validator';\n\nexport const IS_URL = 'isUrl';\n\n/**\n * Checks if the string is a url.\n * If given value is not a string, then it returns false.\n */\nexport function isURL(value: string, options?: ValidatorJS.IsURLOptions): boolean {\n  return typeof value === 'string' && isUrlValidator(value, options);\n}\n\n/**\n * Checks if the string is a url.\n * If given value is not a string, then it returns false.\n */\nexport function IsUrl(options?: ValidatorJS.IsURLOptions, validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_URL,\n      constraints: [options],\n      validator: {\n        validate: (value, args): boolean => isURL(value, args?.constraints[0]),\n        defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be a URL address', validationOptions),\n      },\n    },\n    validationOptions\n  );\n}\n"]},"metadata":{},"sourceType":"module"}