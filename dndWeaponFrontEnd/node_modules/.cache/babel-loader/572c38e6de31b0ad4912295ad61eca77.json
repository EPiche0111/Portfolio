{"ast":null,"code":"import { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isMimeTypeValidator from 'validator/lib/isMimeType';\nexport var IS_MIME_TYPE = 'isMimeType';\n/**\n * Check if the string matches to a valid MIME type format\n * If given value is not a string, then it returns false.\n */\nexport function isMimeType(value) {\n  return typeof value === 'string' && isMimeTypeValidator(value);\n}\n/**\n * Check if the string matches to a valid MIME type format\n * If given value is not a string, then it returns false.\n */\nexport function IsMimeType(validationOptions) {\n  return ValidateBy({\n    name: IS_MIME_TYPE,\n    validator: {\n      validate: function (value, args) {\n        return isMimeType(value);\n      },\n      defaultMessage: buildMessage(function (eachPrefix) {\n        return eachPrefix + '$property must be MIME type format';\n      }, validationOptions)\n    }\n  }, validationOptions);\n}","map":{"version":3,"mappings":"AACA,SAASA,YAAY,EAAEC,UAAU,QAAQ,sBAAsB;AAC/D,OAAOC,mBAAmB,MAAM,0BAA0B;AAE1D,OAAO,IAAMC,YAAY,GAAG,YAAY;AAExC;;;;AAIA,OAAM,SAAUC,UAAUA,CAACC,KAAc;EACvC,OAAO,OAAOA,KAAK,KAAK,QAAQ,IAAIH,mBAAmB,CAACG,KAAK,CAAC;AAChE;AAEA;;;;AAIA,OAAM,SAAUC,UAAUA,CAACC,iBAAqC;EAC9D,OAAON,UAAU,CACf;IACEO,IAAI,EAAEL,YAAY;IAClBM,SAAS,EAAE;MACTC,QAAQ,EAAE,UAACL,KAAK,EAAEM,IAAI;QAAc,iBAAU,CAACN,KAAK,CAAC;MAAjB,CAAiB;MACrDO,cAAc,EAAEZ,YAAY,CAC1B,oBAAU;QAAI,iBAAU,GAAG,oCAAoC;MAAjD,CAAiD,EAC/DO,iBAAiB;;GAGtB,EACDA,iBAAiB,CAClB;AACH","names":["buildMessage","ValidateBy","isMimeTypeValidator","IS_MIME_TYPE","isMimeType","value","IsMimeType","validationOptions","name","validator","validate","args","defaultMessage"],"sourceRoot":"","sources":["../../../../src/decorator/string/IsMimeType.ts"],"sourcesContent":["import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isMimeTypeValidator from 'validator/lib/isMimeType';\n\nexport const IS_MIME_TYPE = 'isMimeType';\n\n/**\n * Check if the string matches to a valid MIME type format\n * If given value is not a string, then it returns false.\n */\nexport function isMimeType(value: unknown): boolean {\n  return typeof value === 'string' && isMimeTypeValidator(value);\n}\n\n/**\n * Check if the string matches to a valid MIME type format\n * If given value is not a string, then it returns false.\n */\nexport function IsMimeType(validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_MIME_TYPE,\n      validator: {\n        validate: (value, args): boolean => isMimeType(value),\n        defaultMessage: buildMessage(\n          eachPrefix => eachPrefix + '$property must be MIME type format',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n"]},"metadata":{},"sourceType":"module"}