{"ast":null,"code":"import { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isLowercaseValidator from 'validator/lib/isLowercase';\nexport var IS_LOWERCASE = 'isLowercase';\n/**\n * Checks if the string is lowercase.\n * If given value is not a string, then it returns false.\n */\nexport function isLowercase(value) {\n  return typeof value === 'string' && isLowercaseValidator(value);\n}\n/**\n * Checks if the string is lowercase.\n * If given value is not a string, then it returns false.\n */\nexport function IsLowercase(validationOptions) {\n  return ValidateBy({\n    name: IS_LOWERCASE,\n    validator: {\n      validate: function (value, args) {\n        return isLowercase(value);\n      },\n      defaultMessage: buildMessage(function (eachPrefix) {\n        return eachPrefix + '$property must be a lowercase string';\n      }, validationOptions)\n    }\n  }, validationOptions);\n}","map":{"version":3,"mappings":"AACA,SAASA,YAAY,EAAEC,UAAU,QAAQ,sBAAsB;AAC/D,OAAOC,oBAAoB,MAAM,2BAA2B;AAE5D,OAAO,IAAMC,YAAY,GAAG,aAAa;AAEzC;;;;AAIA,OAAM,SAAUC,WAAWA,CAACC,KAAc;EACxC,OAAO,OAAOA,KAAK,KAAK,QAAQ,IAAIH,oBAAoB,CAACG,KAAK,CAAC;AACjE;AAEA;;;;AAIA,OAAM,SAAUC,WAAWA,CAACC,iBAAqC;EAC/D,OAAON,UAAU,CACf;IACEO,IAAI,EAAEL,YAAY;IAClBM,SAAS,EAAE;MACTC,QAAQ,EAAE,UAACL,KAAK,EAAEM,IAAI;QAAc,kBAAW,CAACN,KAAK,CAAC;MAAlB,CAAkB;MACtDO,cAAc,EAAEZ,YAAY,CAC1B,oBAAU;QAAI,iBAAU,GAAG,sCAAsC;MAAnD,CAAmD,EACjEO,iBAAiB;;GAGtB,EACDA,iBAAiB,CAClB;AACH","names":["buildMessage","ValidateBy","isLowercaseValidator","IS_LOWERCASE","isLowercase","value","IsLowercase","validationOptions","name","validator","validate","args","defaultMessage"],"sourceRoot":"","sources":["../../../../src/decorator/string/IsLowercase.ts"],"sourcesContent":["import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isLowercaseValidator from 'validator/lib/isLowercase';\n\nexport const IS_LOWERCASE = 'isLowercase';\n\n/**\n * Checks if the string is lowercase.\n * If given value is not a string, then it returns false.\n */\nexport function isLowercase(value: unknown): boolean {\n  return typeof value === 'string' && isLowercaseValidator(value);\n}\n\n/**\n * Checks if the string is lowercase.\n * If given value is not a string, then it returns false.\n */\nexport function IsLowercase(validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_LOWERCASE,\n      validator: {\n        validate: (value, args): boolean => isLowercase(value),\n        defaultMessage: buildMessage(\n          eachPrefix => eachPrefix + '$property must be a lowercase string',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n"]},"metadata":{},"sourceType":"module"}