{"ast":null,"code":"import { buildMessage, ValidateBy } from '../common/ValidateBy';\nexport var ARRAY_MAX_SIZE = 'arrayMaxSize';\n/**\n * Checks if the array's length is less or equal to the specified number.\n * If null or undefined is given then this function returns false.\n */\nexport function arrayMaxSize(array, max) {\n  return Array.isArray(array) && array.length <= max;\n}\n/**\n * Checks if the array's length is less or equal to the specified number.\n * If null or undefined is given then this function returns false.\n */\nexport function ArrayMaxSize(max, validationOptions) {\n  return ValidateBy({\n    name: ARRAY_MAX_SIZE,\n    constraints: [max],\n    validator: {\n      validate: function (value, args) {\n        return arrayMaxSize(value, args === null || args === void 0 ? void 0 : args.constraints[0]);\n      },\n      defaultMessage: buildMessage(function (eachPrefix) {\n        return eachPrefix + '$property must contain no more than $constraint1 elements';\n      }, validationOptions)\n    }\n  }, validationOptions);\n}","map":{"version":3,"mappings":"AACA,SAASA,YAAY,EAAEC,UAAU,QAAQ,sBAAsB;AAE/D,OAAO,IAAMC,cAAc,GAAG,cAAc;AAE5C;;;;AAIA,OAAM,SAAUC,YAAYA,CAACC,KAAc,EAAEC,GAAW;EACtD,OAAOC,KAAK,CAACC,OAAO,CAACH,KAAK,CAAC,IAAIA,KAAK,CAACI,MAAM,IAAIH,GAAG;AACpD;AAEA;;;;AAIA,OAAM,SAAUI,YAAYA,CAACJ,GAAW,EAAEK,iBAAqC;EAC7E,OAAOT,UAAU,CACf;IACEU,IAAI,EAAET,cAAc;IACpBU,WAAW,EAAE,CAACP,GAAG,CAAC;IAClBQ,SAAS,EAAE;MACTC,QAAQ,EAAE,UAACC,KAAK,EAAEC,IAAI;QAAc,mBAAY,CAACD,KAAK,EAAEC,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEJ,WAAW,CAAC,CAAC,CAAC,CAAC;MAAzC,CAAyC;MAC7EK,cAAc,EAAEjB,YAAY,CAC1B,oBAAU;QAAI,iBAAU,GAAG,2DAA2D;MAAxE,CAAwE,EACtFU,iBAAiB;;GAGtB,EACDA,iBAAiB,CAClB;AACH","names":["buildMessage","ValidateBy","ARRAY_MAX_SIZE","arrayMaxSize","array","max","Array","isArray","length","ArrayMaxSize","validationOptions","name","constraints","validator","validate","value","args","defaultMessage"],"sourceRoot":"","sources":["../../../../src/decorator/array/ArrayMaxSize.ts"],"sourcesContent":["import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\n\nexport const ARRAY_MAX_SIZE = 'arrayMaxSize';\n\n/**\n * Checks if the array's length is less or equal to the specified number.\n * If null or undefined is given then this function returns false.\n */\nexport function arrayMaxSize(array: unknown, max: number): boolean {\n  return Array.isArray(array) && array.length <= max;\n}\n\n/**\n * Checks if the array's length is less or equal to the specified number.\n * If null or undefined is given then this function returns false.\n */\nexport function ArrayMaxSize(max: number, validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: ARRAY_MAX_SIZE,\n      constraints: [max],\n      validator: {\n        validate: (value, args): boolean => arrayMaxSize(value, args?.constraints[0]),\n        defaultMessage: buildMessage(\n          eachPrefix => eachPrefix + '$property must contain no more than $constraint1 elements',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n"]},"metadata":{},"sourceType":"module"}