{"ast":null,"code":"import { buildMessage, ValidateBy } from '../common/ValidateBy';\nexport var IS_NOT_IN = 'isNotIn';\n/**\n * Checks if given value not in a array of allowed values.\n */\nexport function isNotIn(value, possibleValues) {\n  return !Array.isArray(possibleValues) || !possibleValues.some(function (possibleValue) {\n    return possibleValue === value;\n  });\n}\n/**\n * Checks if given value not in a array of allowed values.\n */\nexport function IsNotIn(values, validationOptions) {\n  return ValidateBy({\n    name: IS_NOT_IN,\n    constraints: [values],\n    validator: {\n      validate: function (value, args) {\n        return isNotIn(value, args === null || args === void 0 ? void 0 : args.constraints[0]);\n      },\n      defaultMessage: buildMessage(function (eachPrefix) {\n        return eachPrefix + '$property should not be one of the following values: $constraint1';\n      }, validationOptions)\n    }\n  }, validationOptions);\n}","map":{"version":3,"mappings":"AACA,SAASA,YAAY,EAAEC,UAAU,QAAQ,sBAAsB;AAE/D,OAAO,IAAMC,SAAS,GAAG,SAAS;AAElC;;;AAGA,OAAM,SAAUC,OAAOA,CAACC,KAAc,EAAEC,cAAkC;EACxE,OAAO,CAACC,KAAK,CAACC,OAAO,CAACF,cAAc,CAAC,IAAI,CAACA,cAAc,CAACG,IAAI,CAAC,uBAAa;IAAI,oBAAa,KAAKJ,KAAK;EAAvB,CAAuB,CAAC;AACzG;AAEA;;;AAGA,OAAM,SAAUK,OAAOA,CAACC,MAAsB,EAAEC,iBAAqC;EACnF,OAAOV,UAAU,CACf;IACEW,IAAI,EAAEV,SAAS;IACfW,WAAW,EAAE,CAACH,MAAM,CAAC;IACrBI,SAAS,EAAE;MACTC,QAAQ,EAAE,UAACX,KAAK,EAAEY,IAAI;QAAc,cAAO,CAACZ,KAAK,EAAEY,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEH,WAAW,CAAC,CAAC,CAAC,CAAC;MAApC,CAAoC;MACxEI,cAAc,EAAEjB,YAAY,CAC1B,oBAAU;QAAI,iBAAU,GAAG,mEAAmE;MAAhF,CAAgF,EAC9FW,iBAAiB;;GAGtB,EACDA,iBAAiB,CAClB;AACH","names":["buildMessage","ValidateBy","IS_NOT_IN","isNotIn","value","possibleValues","Array","isArray","some","IsNotIn","values","validationOptions","name","constraints","validator","validate","args","defaultMessage"],"sourceRoot":"","sources":["../../../../src/decorator/common/IsNotIn.ts"],"sourcesContent":["import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\n\nexport const IS_NOT_IN = 'isNotIn';\n\n/**\n * Checks if given value not in a array of allowed values.\n */\nexport function isNotIn(value: unknown, possibleValues: readonly unknown[]): boolean {\n  return !Array.isArray(possibleValues) || !possibleValues.some(possibleValue => possibleValue === value);\n}\n\n/**\n * Checks if given value not in a array of allowed values.\n */\nexport function IsNotIn(values: readonly any[], validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_NOT_IN,\n      constraints: [values],\n      validator: {\n        validate: (value, args): boolean => isNotIn(value, args?.constraints[0]),\n        defaultMessage: buildMessage(\n          eachPrefix => eachPrefix + '$property should not be one of the following values: $constraint1',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n"]},"metadata":{},"sourceType":"module"}