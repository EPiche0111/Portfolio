{"ast":null,"code":"import { buildMessage, ValidateBy } from '../common/ValidateBy';\nexport var MIN_DATE = 'minDate';\n/**\n * Checks if the value is a date that's after the specified date.\n */\nexport function minDate(date, minDate) {\n  return date instanceof Date && date.getTime() >= (minDate instanceof Date ? minDate : minDate()).getTime();\n}\n/**\n * Checks if the value is a date that's after the specified date.\n */\nexport function MinDate(date, validationOptions) {\n  return ValidateBy({\n    name: MIN_DATE,\n    constraints: [date],\n    validator: {\n      validate: function (value, args) {\n        return minDate(value, args === null || args === void 0 ? void 0 : args.constraints[0]);\n      },\n      defaultMessage: buildMessage(function (eachPrefix) {\n        return 'minimal allowed date for ' + eachPrefix + '$property is $constraint1';\n      }, validationOptions)\n    }\n  }, validationOptions);\n}","map":{"version":3,"mappings":"AACA,SAASA,YAAY,EAAEC,UAAU,QAAQ,sBAAsB;AAE/D,OAAO,IAAMC,QAAQ,GAAG,SAAS;AAEjC;;;AAGA,OAAM,SAAUC,OAAOA,CAACC,IAAa,EAAED,OAA4B;EACjE,OAAOC,IAAI,YAAYC,IAAI,IAAID,IAAI,CAACE,OAAO,EAAE,IAAI,CAACH,OAAO,YAAYE,IAAI,GAAGF,OAAO,GAAGA,OAAO,EAAE,EAAEG,OAAO,EAAE;AAC5G;AAEA;;;AAGA,OAAM,SAAUC,OAAOA,CAACH,IAAyB,EAAEI,iBAAqC;EACtF,OAAOP,UAAU,CACf;IACEQ,IAAI,EAAEP,QAAQ;IACdQ,WAAW,EAAE,CAACN,IAAI,CAAC;IACnBO,SAAS,EAAE;MACTC,QAAQ,EAAE,UAACC,KAAK,EAAEC,IAAI;QAAc,cAAO,CAACD,KAAK,EAAEC,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEJ,WAAW,CAAC,CAAC,CAAC,CAAC;MAApC,CAAoC;MACxEK,cAAc,EAAEf,YAAY,CAC1B,oBAAU;QAAI,kCAA2B,GAAGgB,UAAU,GAAG,2BAA2B;MAAtE,CAAsE,EACpFR,iBAAiB;;GAGtB,EACDA,iBAAiB,CAClB;AACH","names":["buildMessage","ValidateBy","MIN_DATE","minDate","date","Date","getTime","MinDate","validationOptions","name","constraints","validator","validate","value","args","defaultMessage","eachPrefix"],"sourceRoot":"","sources":["../../../../src/decorator/date/MinDate.ts"],"sourcesContent":["import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\n\nexport const MIN_DATE = 'minDate';\n\n/**\n * Checks if the value is a date that's after the specified date.\n */\nexport function minDate(date: unknown, minDate: Date | (() => Date)): boolean {\n  return date instanceof Date && date.getTime() >= (minDate instanceof Date ? minDate : minDate()).getTime();\n}\n\n/**\n * Checks if the value is a date that's after the specified date.\n */\nexport function MinDate(date: Date | (() => Date), validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: MIN_DATE,\n      constraints: [date],\n      validator: {\n        validate: (value, args): boolean => minDate(value, args?.constraints[0]),\n        defaultMessage: buildMessage(\n          eachPrefix => 'minimal allowed date for ' + eachPrefix + '$property is $constraint1',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n"]},"metadata":{},"sourceType":"module"}