{"ast":null,"code":"import { getMetadataStorage } from './metadata/MetadataStorage';\nimport { Validator } from './validation/Validator';\nimport { getFromContainer } from './container';\n// -------------------------------------------------------------------------\n// Export everything api users needs\n// -------------------------------------------------------------------------\nexport * from './container';\nexport * from './decorator/decorators';\nexport * from './decorator/ValidationOptions';\nexport * from './validation/ValidatorConstraintInterface';\nexport * from './validation/ValidationError';\nexport * from './validation/ValidatorOptions';\nexport * from './validation/ValidationArguments';\nexport * from './validation/ValidationTypes';\nexport * from './validation/Validator';\nexport * from './validation-schema/ValidationSchema';\nexport * from './register-decorator';\nexport * from './metadata/MetadataStorage';\n/**\n * Validates given object by object's decorators or given validation schema.\n */\nexport function validate(schemaNameOrObject, objectOrValidationOptions, maybeValidatorOptions) {\n  if (typeof schemaNameOrObject === 'string') {\n    return getFromContainer(Validator).validate(schemaNameOrObject, objectOrValidationOptions, maybeValidatorOptions);\n  } else {\n    return getFromContainer(Validator).validate(schemaNameOrObject, objectOrValidationOptions);\n  }\n}\n/**\n * Validates given object by object's decorators or given validation schema and reject on error.\n */\nexport function validateOrReject(schemaNameOrObject, objectOrValidationOptions, maybeValidatorOptions) {\n  if (typeof schemaNameOrObject === 'string') {\n    return getFromContainer(Validator).validateOrReject(schemaNameOrObject, objectOrValidationOptions, maybeValidatorOptions);\n  } else {\n    return getFromContainer(Validator).validateOrReject(schemaNameOrObject, objectOrValidationOptions);\n  }\n}\n/**\n * Validates given object by object's decorators or given validation schema.\n * Note that this method completely ignores async validations.\n * If you want to properly perform validation you need to call validate method instead.\n */\nexport function validateSync(schemaNameOrObject, objectOrValidationOptions, maybeValidatorOptions) {\n  if (typeof schemaNameOrObject === 'string') {\n    return getFromContainer(Validator).validateSync(schemaNameOrObject, objectOrValidationOptions, maybeValidatorOptions);\n  } else {\n    return getFromContainer(Validator).validateSync(schemaNameOrObject, objectOrValidationOptions);\n  }\n}\n/**\n * Registers a new validation schema.\n */\nexport function registerSchema(schema) {\n  getMetadataStorage().addValidationSchema(schema);\n}","map":{"version":3,"mappings":"AAGA,SAASA,kBAAkB,QAAQ,4BAA4B;AAC/D,SAASC,SAAS,QAAQ,wBAAwB;AAClD,SAASC,gBAAgB,QAAQ,aAAa;AAE9C;AACA;AACA;AAEA,cAAc,aAAa;AAC3B,cAAc,wBAAwB;AACtC,cAAc,+BAA+B;AAC7C,cAAc,2CAA2C;AACzD,cAAc,8BAA8B;AAC5C,cAAc,+BAA+B;AAC7C,cAAc,kCAAkC;AAChD,cAAc,8BAA8B;AAC5C,cAAc,wBAAwB;AACtC,cAAc,sCAAsC;AACpD,cAAc,sBAAsB;AACpC,cAAc,4BAA4B;AAoB1C;;;AAGA,OAAM,SAAUC,QAAQA,CACtBC,kBAAmC,EACnCC,yBAAqD,EACrDC,qBAAwC;EAExC,IAAI,OAAOF,kBAAkB,KAAK,QAAQ,EAAE;IAC1C,OAAOF,gBAAgB,CAACD,SAAS,CAAC,CAACE,QAAQ,CACzCC,kBAAkB,EAClBC,yBAAmC,EACnCC,qBAAqB,CACtB;GACF,MAAM;IACL,OAAOJ,gBAAgB,CAACD,SAAS,CAAC,CAACE,QAAQ,CAACC,kBAAkB,EAAEC,yBAA6C,CAAC;;AAElH;AAgBA;;;AAGA,OAAM,SAAUE,gBAAgBA,CAC9BH,kBAAmC,EACnCC,yBAAqD,EACrDC,qBAAwC;EAExC,IAAI,OAAOF,kBAAkB,KAAK,QAAQ,EAAE;IAC1C,OAAOF,gBAAgB,CAACD,SAAS,CAAC,CAACM,gBAAgB,CACjDH,kBAAkB,EAClBC,yBAAmC,EACnCC,qBAAqB,CACtB;GACF,MAAM;IACL,OAAOJ,gBAAgB,CAACD,SAAS,CAAC,CAACM,gBAAgB,CACjDH,kBAAkB,EAClBC,yBAA6C,CAC9C;;AAEL;AAoBA;;;;;AAKA,OAAM,SAAUG,YAAYA,CAC1BJ,kBAAmC,EACnCC,yBAAqD,EACrDC,qBAAwC;EAExC,IAAI,OAAOF,kBAAkB,KAAK,QAAQ,EAAE;IAC1C,OAAOF,gBAAgB,CAACD,SAAS,CAAC,CAACO,YAAY,CAC7CJ,kBAAkB,EAClBC,yBAAmC,EACnCC,qBAAqB,CACtB;GACF,MAAM;IACL,OAAOJ,gBAAgB,CAACD,SAAS,CAAC,CAACO,YAAY,CAACJ,kBAAkB,EAAEC,yBAA6C,CAAC;;AAEtH;AAEA;;;AAGA,OAAM,SAAUI,cAAcA,CAACC,MAAwB;EACrDV,kBAAkB,EAAE,CAACW,mBAAmB,CAACD,MAAM,CAAC;AAClD","names":["getMetadataStorage","Validator","getFromContainer","validate","schemaNameOrObject","objectOrValidationOptions","maybeValidatorOptions","validateOrReject","validateSync","registerSchema","schema","addValidationSchema"],"sourceRoot":"","sources":["../../src/index.ts"],"sourcesContent":["import { ValidationError } from './validation/ValidationError';\nimport { ValidatorOptions } from './validation/ValidatorOptions';\nimport { ValidationSchema } from './validation-schema/ValidationSchema';\nimport { getMetadataStorage } from './metadata/MetadataStorage';\nimport { Validator } from './validation/Validator';\nimport { getFromContainer } from './container';\n\n// -------------------------------------------------------------------------\n// Export everything api users needs\n// -------------------------------------------------------------------------\n\nexport * from './container';\nexport * from './decorator/decorators';\nexport * from './decorator/ValidationOptions';\nexport * from './validation/ValidatorConstraintInterface';\nexport * from './validation/ValidationError';\nexport * from './validation/ValidatorOptions';\nexport * from './validation/ValidationArguments';\nexport * from './validation/ValidationTypes';\nexport * from './validation/Validator';\nexport * from './validation-schema/ValidationSchema';\nexport * from './register-decorator';\nexport * from './metadata/MetadataStorage';\n\n// -------------------------------------------------------------------------\n// Shortcut methods for api users\n// -------------------------------------------------------------------------\n\n/**\n * Validates given object.\n */\nexport function validate(object: object, validatorOptions?: ValidatorOptions): Promise<ValidationError[]>;\n\n/**\n * Validates given object by a given validation schema.\n */\nexport function validate(\n  schemaName: string,\n  object: object,\n  validatorOptions?: ValidatorOptions\n): Promise<ValidationError[]>;\n\n/**\n * Validates given object by object's decorators or given validation schema.\n */\nexport function validate(\n  schemaNameOrObject: object | string,\n  objectOrValidationOptions?: object | ValidatorOptions,\n  maybeValidatorOptions?: ValidatorOptions\n): Promise<ValidationError[]> {\n  if (typeof schemaNameOrObject === 'string') {\n    return getFromContainer(Validator).validate(\n      schemaNameOrObject,\n      objectOrValidationOptions as object,\n      maybeValidatorOptions\n    );\n  } else {\n    return getFromContainer(Validator).validate(schemaNameOrObject, objectOrValidationOptions as ValidatorOptions);\n  }\n}\n\n/**\n * Validates given object and reject on error.\n */\nexport function validateOrReject(object: object, validatorOptions?: ValidatorOptions): Promise<void>;\n\n/**\n * Validates given object by a given validation schema and reject on error.\n */\nexport function validateOrReject(\n  schemaName: string,\n  object: object,\n  validatorOptions?: ValidatorOptions\n): Promise<void>;\n\n/**\n * Validates given object by object's decorators or given validation schema and reject on error.\n */\nexport function validateOrReject(\n  schemaNameOrObject: object | string,\n  objectOrValidationOptions?: object | ValidatorOptions,\n  maybeValidatorOptions?: ValidatorOptions\n): Promise<void> {\n  if (typeof schemaNameOrObject === 'string') {\n    return getFromContainer(Validator).validateOrReject(\n      schemaNameOrObject,\n      objectOrValidationOptions as object,\n      maybeValidatorOptions\n    );\n  } else {\n    return getFromContainer(Validator).validateOrReject(\n      schemaNameOrObject,\n      objectOrValidationOptions as ValidatorOptions\n    );\n  }\n}\n\n/**\n * Performs sync validation of the given object.\n * Note that this method completely ignores async validations.\n * If you want to properly perform validation you need to call validate method instead.\n */\nexport function validateSync(object: object, validatorOptions?: ValidatorOptions): ValidationError[];\n\n/**\n * Validates given object by a given validation schema.\n * Note that this method completely ignores async validations.\n * If you want to properly perform validation you need to call validate method instead.\n */\nexport function validateSync(\n  schemaName: string,\n  object: object,\n  validatorOptions?: ValidatorOptions\n): ValidationError[];\n\n/**\n * Validates given object by object's decorators or given validation schema.\n * Note that this method completely ignores async validations.\n * If you want to properly perform validation you need to call validate method instead.\n */\nexport function validateSync(\n  schemaNameOrObject: object | string,\n  objectOrValidationOptions?: object | ValidatorOptions,\n  maybeValidatorOptions?: ValidatorOptions\n): ValidationError[] {\n  if (typeof schemaNameOrObject === 'string') {\n    return getFromContainer(Validator).validateSync(\n      schemaNameOrObject,\n      objectOrValidationOptions as object,\n      maybeValidatorOptions\n    );\n  } else {\n    return getFromContainer(Validator).validateSync(schemaNameOrObject, objectOrValidationOptions as ValidatorOptions);\n  }\n}\n\n/**\n * Registers a new validation schema.\n */\nexport function registerSchema(schema: ValidationSchema): void {\n  getMetadataStorage().addValidationSchema(schema);\n}\n"]},"metadata":{},"sourceType":"module"}