{"ast":null,"code":"import { buildMessage, ValidateBy } from '../common/ValidateBy';\nexport var MIN = 'min';\n/**\n * Checks if the first number is greater than or equal to the second.\n */\nexport function min(num, min) {\n  return typeof num === 'number' && typeof min === 'number' && num >= min;\n}\n/**\n * Checks if the value is greater than or equal to the allowed minimum value.\n */\nexport function Min(minValue, validationOptions) {\n  return ValidateBy({\n    name: MIN,\n    constraints: [minValue],\n    validator: {\n      validate: function (value, args) {\n        return min(value, args === null || args === void 0 ? void 0 : args.constraints[0]);\n      },\n      defaultMessage: buildMessage(function (eachPrefix) {\n        return eachPrefix + '$property must not be less than $constraint1';\n      }, validationOptions)\n    }\n  }, validationOptions);\n}","map":{"version":3,"mappings":"AACA,SAASA,YAAY,EAAEC,UAAU,QAAQ,sBAAsB;AAE/D,OAAO,IAAMC,GAAG,GAAG,KAAK;AAExB;;;AAGA,OAAM,SAAUC,GAAGA,CAACC,GAAY,EAAED,GAAW;EAC3C,OAAO,OAAOC,GAAG,KAAK,QAAQ,IAAI,OAAOD,GAAG,KAAK,QAAQ,IAAIC,GAAG,IAAID,GAAG;AACzE;AAEA;;;AAGA,OAAM,SAAUE,GAAGA,CAACC,QAAgB,EAAEC,iBAAqC;EACzE,OAAON,UAAU,CACf;IACEO,IAAI,EAAEN,GAAG;IACTO,WAAW,EAAE,CAACH,QAAQ,CAAC;IACvBI,SAAS,EAAE;MACTC,QAAQ,EAAE,UAACC,KAAK,EAAEC,IAAI;QAAc,UAAG,CAACD,KAAK,EAAEC,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEJ,WAAW,CAAC,CAAC,CAAC,CAAC;MAAhC,CAAgC;MACpEK,cAAc,EAAEd,YAAY,CAC1B,oBAAU;QAAI,iBAAU,GAAG,8CAA8C;MAA3D,CAA2D,EACzEO,iBAAiB;;GAGtB,EACDA,iBAAiB,CAClB;AACH","names":["buildMessage","ValidateBy","MIN","min","num","Min","minValue","validationOptions","name","constraints","validator","validate","value","args","defaultMessage"],"sourceRoot":"","sources":["../../../../src/decorator/number/Min.ts"],"sourcesContent":["import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\n\nexport const MIN = 'min';\n\n/**\n * Checks if the first number is greater than or equal to the second.\n */\nexport function min(num: unknown, min: number): boolean {\n  return typeof num === 'number' && typeof min === 'number' && num >= min;\n}\n\n/**\n * Checks if the value is greater than or equal to the allowed minimum value.\n */\nexport function Min(minValue: number, validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: MIN,\n      constraints: [minValue],\n      validator: {\n        validate: (value, args): boolean => min(value, args?.constraints[0]),\n        defaultMessage: buildMessage(\n          eachPrefix => eachPrefix + '$property must not be less than $constraint1',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n"]},"metadata":{},"sourceType":"module"}