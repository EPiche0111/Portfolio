{"ast":null,"code":"/**\n * Validation types.\n */\nvar ValidationTypes = /** @class */function () {\n  function ValidationTypes() {}\n  /**\n   * Checks if validation type is valid.\n   */\n  ValidationTypes.isValid = function (type) {\n    var _this = this;\n    return type !== 'isValid' && type !== 'getMessage' && Object.keys(this).map(function (key) {\n      return _this[key];\n    }).indexOf(type) !== -1;\n  };\n  /* system */\n  ValidationTypes.CUSTOM_VALIDATION = 'customValidation'; // done\n  ValidationTypes.NESTED_VALIDATION = 'nestedValidation'; // done\n  ValidationTypes.PROMISE_VALIDATION = 'promiseValidation'; // done\n  ValidationTypes.CONDITIONAL_VALIDATION = 'conditionalValidation'; // done\n  ValidationTypes.WHITELIST = 'whitelistValidation'; // done\n  ValidationTypes.IS_DEFINED = 'isDefined'; // done\n  return ValidationTypes;\n}();\nexport { ValidationTypes };","map":{"version":3,"mappings":"AAAA;;;AAGA;EAAA,4BAqBA;EAZE;;;EAGOA,uBAAO,GAAd,UAAeC,IAAY;IAA3B;IACE,OACEA,IAAI,KAAK,SAAS,IAClBA,IAAI,KAAK,YAAY,IACrBC,MAAM,CAACC,IAAI,CAAC,IAAI,CAAC,CACdC,GAAG,CAAC,aAAG;MAAI,OAACC,KAAY,CAACC,GAAG,CAAC;IAAlB,CAAkB,CAAC,CAC9BC,OAAO,CAACN,IAAI,CAAC,KAAK,CAAC,CAAC;EAE3B,CAAC;EAnBD;EACOD,iCAAiB,GAAG,kBAAkB,CAAC,CAAC;EACxCA,iCAAiB,GAAG,kBAAkB,CAAC,CAAC;EACxCA,kCAAkB,GAAG,mBAAmB,CAAC,CAAC;EAC1CA,sCAAsB,GAAG,uBAAuB,CAAC,CAAC;EAClDA,yBAAS,GAAG,qBAAqB,CAAC,CAAC;EACnCA,0BAAU,GAAG,WAAW,CAAC,CAAC;EAcnC,sBAAC;CAAA,CArBD;SAAaA,eAAe","names":["ValidationTypes","type","Object","keys","map","_this","key","indexOf"],"sourceRoot":"","sources":["../../../src/validation/ValidationTypes.ts"],"sourcesContent":["/**\n * Validation types.\n */\nexport class ValidationTypes {\n  /* system */\n  static CUSTOM_VALIDATION = 'customValidation'; // done\n  static NESTED_VALIDATION = 'nestedValidation'; // done\n  static PROMISE_VALIDATION = 'promiseValidation'; // done\n  static CONDITIONAL_VALIDATION = 'conditionalValidation'; // done\n  static WHITELIST = 'whitelistValidation'; // done\n  static IS_DEFINED = 'isDefined'; // done\n\n  /**\n   * Checks if validation type is valid.\n   */\n  static isValid(type: string): boolean {\n    return (\n      type !== 'isValid' &&\n      type !== 'getMessage' &&\n      Object.keys(this)\n        .map(key => (this as any)[key])\n        .indexOf(type) !== -1\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}