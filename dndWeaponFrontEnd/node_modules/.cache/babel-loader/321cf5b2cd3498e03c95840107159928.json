{"ast":null,"code":"import { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isJSONValidator from 'validator/lib/isJSON';\nexport var IS_JSON = 'isJson';\n/**\n * Checks if the string is valid JSON (note: uses JSON.parse).\n * If given value is not a string, then it returns false.\n */\nexport function isJSON(value) {\n  return typeof value === 'string' && isJSONValidator(value);\n}\n/**\n * Checks if the string is valid JSON (note: uses JSON.parse).\n * If given value is not a string, then it returns false.\n */\nexport function IsJSON(validationOptions) {\n  return ValidateBy({\n    name: IS_JSON,\n    validator: {\n      validate: function (value, args) {\n        return isJSON(value);\n      },\n      defaultMessage: buildMessage(function (eachPrefix) {\n        return eachPrefix + '$property must be a json string';\n      }, validationOptions)\n    }\n  }, validationOptions);\n}","map":{"version":3,"mappings":"AACA,SAASA,YAAY,EAAEC,UAAU,QAAQ,sBAAsB;AAC/D,OAAOC,eAAe,MAAM,sBAAsB;AAElD,OAAO,IAAMC,OAAO,GAAG,QAAQ;AAE/B;;;;AAIA,OAAM,SAAUC,MAAMA,CAACC,KAAc;EACnC,OAAO,OAAOA,KAAK,KAAK,QAAQ,IAAIH,eAAe,CAACG,KAAK,CAAC;AAC5D;AAEA;;;;AAIA,OAAM,SAAUC,MAAMA,CAACC,iBAAqC;EAC1D,OAAON,UAAU,CACf;IACEO,IAAI,EAAEL,OAAO;IACbM,SAAS,EAAE;MACTC,QAAQ,EAAE,UAACL,KAAK,EAAEM,IAAI;QAAc,aAAM,CAACN,KAAK,CAAC;MAAb,CAAa;MACjDO,cAAc,EAAEZ,YAAY,CAAC,oBAAU;QAAI,iBAAU,GAAG,iCAAiC;MAA9C,CAA8C,EAAEO,iBAAiB;;GAE/G,EACDA,iBAAiB,CAClB;AACH","names":["buildMessage","ValidateBy","isJSONValidator","IS_JSON","isJSON","value","IsJSON","validationOptions","name","validator","validate","args","defaultMessage"],"sourceRoot":"","sources":["../../../../src/decorator/string/IsJSON.ts"],"sourcesContent":["import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isJSONValidator from 'validator/lib/isJSON';\n\nexport const IS_JSON = 'isJson';\n\n/**\n * Checks if the string is valid JSON (note: uses JSON.parse).\n * If given value is not a string, then it returns false.\n */\nexport function isJSON(value: unknown): boolean {\n  return typeof value === 'string' && isJSONValidator(value);\n}\n\n/**\n * Checks if the string is valid JSON (note: uses JSON.parse).\n * If given value is not a string, then it returns false.\n */\nexport function IsJSON(validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_JSON,\n      validator: {\n        validate: (value, args): boolean => isJSON(value),\n        defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be a json string', validationOptions),\n      },\n    },\n    validationOptions\n  );\n}\n"]},"metadata":{},"sourceType":"module"}