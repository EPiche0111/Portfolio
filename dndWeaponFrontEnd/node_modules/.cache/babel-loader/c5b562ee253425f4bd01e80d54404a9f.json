{"ast":null,"code":"import { buildMessage, ValidateBy } from '../common/ValidateBy';\nexport var ARRAY_CONTAINS = 'arrayContains';\n/**\n * Checks if array contains all values from the given array of values.\n * If null or undefined is given then this function returns false.\n */\nexport function arrayContains(array, values) {\n  if (!Array.isArray(array)) return false;\n  return values.every(function (value) {\n    return array.indexOf(value) !== -1;\n  });\n}\n/**\n * Checks if array contains all values from the given array of values.\n * If null or undefined is given then this function returns false.\n */\nexport function ArrayContains(values, validationOptions) {\n  return ValidateBy({\n    name: ARRAY_CONTAINS,\n    constraints: [values],\n    validator: {\n      validate: function (value, args) {\n        return arrayContains(value, args === null || args === void 0 ? void 0 : args.constraints[0]);\n      },\n      defaultMessage: buildMessage(function (eachPrefix) {\n        return eachPrefix + '$property must contain $constraint1 values';\n      }, validationOptions)\n    }\n  }, validationOptions);\n}","map":{"version":3,"mappings":"AACA,SAASA,YAAY,EAAEC,UAAU,QAAQ,sBAAsB;AAE/D,OAAO,IAAMC,cAAc,GAAG,eAAe;AAE7C;;;;AAIA,OAAM,SAAUC,aAAaA,CAACC,KAAc,EAAEC,MAAa;EACzD,IAAI,CAACC,KAAK,CAACC,OAAO,CAACH,KAAK,CAAC,EAAE,OAAO,KAAK;EAEvC,OAAOC,MAAM,CAACG,KAAK,CAAC,eAAK;IAAI,YAAK,CAACC,OAAO,CAACC,KAAK,CAAC,KAAK,CAAC,CAAC;EAA3B,CAA2B,CAAC;AAC3D;AAEA;;;;AAIA,OAAM,SAAUC,aAAaA,CAACN,MAAa,EAAEO,iBAAqC;EAChF,OAAOX,UAAU,CACf;IACEY,IAAI,EAAEX,cAAc;IACpBY,WAAW,EAAE,CAACT,MAAM,CAAC;IACrBU,SAAS,EAAE;MACTC,QAAQ,EAAE,UAACN,KAAK,EAAEO,IAAI;QAAc,oBAAa,CAACP,KAAK,EAAEO,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEH,WAAW,CAAC,CAAC,CAAC,CAAC;MAA1C,CAA0C;MAC9EI,cAAc,EAAElB,YAAY,CAC1B,oBAAU;QAAI,iBAAU,GAAG,4CAA4C;MAAzD,CAAyD,EACvEY,iBAAiB;;GAGtB,EACDA,iBAAiB,CAClB;AACH","names":["buildMessage","ValidateBy","ARRAY_CONTAINS","arrayContains","array","values","Array","isArray","every","indexOf","value","ArrayContains","validationOptions","name","constraints","validator","validate","args","defaultMessage"],"sourceRoot":"","sources":["../../../../src/decorator/array/ArrayContains.ts"],"sourcesContent":["import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\n\nexport const ARRAY_CONTAINS = 'arrayContains';\n\n/**\n * Checks if array contains all values from the given array of values.\n * If null or undefined is given then this function returns false.\n */\nexport function arrayContains(array: unknown, values: any[]): boolean {\n  if (!Array.isArray(array)) return false;\n\n  return values.every(value => array.indexOf(value) !== -1);\n}\n\n/**\n * Checks if array contains all values from the given array of values.\n * If null or undefined is given then this function returns false.\n */\nexport function ArrayContains(values: any[], validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: ARRAY_CONTAINS,\n      constraints: [values],\n      validator: {\n        validate: (value, args): boolean => arrayContains(value, args?.constraints[0]),\n        defaultMessage: buildMessage(\n          eachPrefix => eachPrefix + '$property must contain $constraint1 values',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n"]},"metadata":{},"sourceType":"module"}