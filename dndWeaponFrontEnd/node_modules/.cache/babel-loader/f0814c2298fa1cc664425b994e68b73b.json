{"ast":null,"code":"import { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport matchesValidator from 'validator/lib/matches';\nexport var IS_MILITARY_TIME = 'isMilitaryTime';\n/**\n * Checks if the string represents a time without a given timezone in the format HH:MM (military)\n * If the given value does not match the pattern HH:MM, then it returns false.\n */\nexport function isMilitaryTime(value) {\n  var militaryTimeRegex = /^([01]\\d|2[0-3]):?([0-5]\\d)$/;\n  return typeof value === 'string' && matchesValidator(value, militaryTimeRegex);\n}\n/**\n * Checks if the string represents a time without a given timezone in the format HH:MM (military)\n * If the given value does not match the pattern HH:MM, then it returns false.\n */\nexport function IsMilitaryTime(validationOptions) {\n  return ValidateBy({\n    name: IS_MILITARY_TIME,\n    validator: {\n      validate: function (value, args) {\n        return isMilitaryTime(value);\n      },\n      defaultMessage: buildMessage(function (eachPrefix) {\n        return eachPrefix + '$property must be a valid representation of military time in the format HH:MM';\n      }, validationOptions)\n    }\n  }, validationOptions);\n}","map":{"version":3,"mappings":"AACA,SAASA,YAAY,EAAEC,UAAU,QAAQ,sBAAsB;AAC/D,OAAOC,gBAAgB,MAAM,uBAAuB;AAEpD,OAAO,IAAMC,gBAAgB,GAAG,gBAAgB;AAEhD;;;;AAIA,OAAM,SAAUC,cAAcA,CAACC,KAAc;EAC3C,IAAMC,iBAAiB,GAAG,8BAA8B;EACxD,OAAO,OAAOD,KAAK,KAAK,QAAQ,IAAIH,gBAAgB,CAACG,KAAK,EAAEC,iBAAiB,CAAC;AAChF;AAEA;;;;AAIA,OAAM,SAAUC,cAAcA,CAACC,iBAAqC;EAClE,OAAOP,UAAU,CACf;IACEQ,IAAI,EAAEN,gBAAgB;IACtBO,SAAS,EAAE;MACTC,QAAQ,EAAE,UAACN,KAAK,EAAEO,IAAI;QAAc,qBAAc,CAACP,KAAK,CAAC;MAArB,CAAqB;MACzDQ,cAAc,EAAEb,YAAY,CAC1B,oBAAU;QAAI,iBAAU,GAAG,+EAA+E;MAA5F,CAA4F,EAC1GQ,iBAAiB;;GAGtB,EACDA,iBAAiB,CAClB;AACH","names":["buildMessage","ValidateBy","matchesValidator","IS_MILITARY_TIME","isMilitaryTime","value","militaryTimeRegex","IsMilitaryTime","validationOptions","name","validator","validate","args","defaultMessage"],"sourceRoot":"","sources":["../../../../src/decorator/string/IsMilitaryTime.ts"],"sourcesContent":["import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport matchesValidator from 'validator/lib/matches';\n\nexport const IS_MILITARY_TIME = 'isMilitaryTime';\n\n/**\n * Checks if the string represents a time without a given timezone in the format HH:MM (military)\n * If the given value does not match the pattern HH:MM, then it returns false.\n */\nexport function isMilitaryTime(value: unknown): boolean {\n  const militaryTimeRegex = /^([01]\\d|2[0-3]):?([0-5]\\d)$/;\n  return typeof value === 'string' && matchesValidator(value, militaryTimeRegex);\n}\n\n/**\n * Checks if the string represents a time without a given timezone in the format HH:MM (military)\n * If the given value does not match the pattern HH:MM, then it returns false.\n */\nexport function IsMilitaryTime(validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_MILITARY_TIME,\n      validator: {\n        validate: (value, args): boolean => isMilitaryTime(value),\n        defaultMessage: buildMessage(\n          eachPrefix => eachPrefix + '$property must be a valid representation of military time in the format HH:MM',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n"]},"metadata":{},"sourceType":"module"}