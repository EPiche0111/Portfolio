{"ast":null,"code":"import { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isLengthValidator from 'validator/lib/isLength';\nexport var IS_LENGTH = 'isLength';\n/**\n * Checks if the string's length falls in a range. Note: this function takes into account surrogate pairs.\n * If given value is not a string, then it returns false.\n */\nexport function length(value, min, max) {\n  return typeof value === 'string' && isLengthValidator(value, {\n    min: min,\n    max: max\n  });\n}\n/**\n * Checks if the string's length falls in a range. Note: this function takes into account surrogate pairs.\n * If given value is not a string, then it returns false.\n */\nexport function Length(min, max, validationOptions) {\n  return ValidateBy({\n    name: IS_LENGTH,\n    constraints: [min, max],\n    validator: {\n      validate: function (value, args) {\n        return length(value, args === null || args === void 0 ? void 0 : args.constraints[0], args === null || args === void 0 ? void 0 : args.constraints[1]);\n      },\n      defaultMessage: buildMessage(function (eachPrefix, args) {\n        var isMinLength = (args === null || args === void 0 ? void 0 : args.constraints[0]) !== null && (args === null || args === void 0 ? void 0 : args.constraints[0]) !== undefined;\n        var isMaxLength = (args === null || args === void 0 ? void 0 : args.constraints[1]) !== null && (args === null || args === void 0 ? void 0 : args.constraints[1]) !== undefined;\n        if (isMinLength && (!args.value || args.value.length < (args === null || args === void 0 ? void 0 : args.constraints[0]))) {\n          return eachPrefix + '$property must be longer than or equal to $constraint1 characters';\n        } else if (isMaxLength && args.value.length > (args === null || args === void 0 ? void 0 : args.constraints[1])) {\n          return eachPrefix + '$property must be shorter than or equal to $constraint2 characters';\n        }\n        return eachPrefix + '$property must be longer than or equal to $constraint1 and shorter than or equal to $constraint2 characters';\n      }, validationOptions)\n    }\n  }, validationOptions);\n}","map":{"version":3,"mappings":"AACA,SAASA,YAAY,EAAEC,UAAU,QAAQ,sBAAsB;AAC/D,OAAOC,iBAAiB,MAAM,wBAAwB;AAEtD,OAAO,IAAMC,SAAS,GAAG,UAAU;AAEnC;;;;AAIA,OAAM,SAAUC,MAAMA,CAACC,KAAc,EAAEC,GAAW,EAAEC,GAAY;EAC9D,OAAO,OAAOF,KAAK,KAAK,QAAQ,IAAIH,iBAAiB,CAACG,KAAK,EAAE;IAAEC,GAAG;IAAEC,GAAG;EAAA,CAAE,CAAC;AAC5E;AAEA;;;;AAIA,OAAM,SAAUC,MAAMA,CAACF,GAAW,EAAEC,GAAY,EAAEE,iBAAqC;EACrF,OAAOR,UAAU,CACf;IACES,IAAI,EAAEP,SAAS;IACfQ,WAAW,EAAE,CAACL,GAAG,EAAEC,GAAG,CAAC;IACvBK,SAAS,EAAE;MACTC,QAAQ,EAAE,UAACR,KAAK,EAAES,IAAI;QAAc,aAAM,CAACT,KAAK,EAAES,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEH,WAAW,CAAC,CAAC,CAAC,EAAEG,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEH,WAAW,CAAC,CAAC,CAAC,CAAC;MAAzD,CAAyD;MAC7FI,cAAc,EAAEf,YAAY,CAAC,UAACgB,UAAU,EAAEF,IAAI;QAC5C,IAAMG,WAAW,GAAG,KAAI,aAAJH,IAAI,uBAAJA,IAAI,CAAEH,WAAW,CAAC,CAAC,CAAC,MAAK,IAAI,IAAI,KAAI,aAAJG,IAAI,uBAAJA,IAAI,CAAEH,WAAW,CAAC,CAAC,CAAC,MAAKO,SAAS;QACvF,IAAMC,WAAW,GAAG,KAAI,aAAJL,IAAI,uBAAJA,IAAI,CAAEH,WAAW,CAAC,CAAC,CAAC,MAAK,IAAI,IAAI,KAAI,aAAJG,IAAI,uBAAJA,IAAI,CAAEH,WAAW,CAAC,CAAC,CAAC,MAAKO,SAAS;QACvF,IAAID,WAAW,KAAK,CAACH,IAAI,CAACT,KAAK,IAAIS,IAAI,CAACT,KAAK,CAACD,MAAM,IAAGU,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEH,WAAW,CAAC,CAAC,CAAC,EAAC,EAAE;UAC5E,OAAOK,UAAU,GAAG,mEAAmE;SACxF,MAAM,IAAIG,WAAW,IAAIL,IAAI,CAACT,KAAK,CAACD,MAAM,IAAGU,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEH,WAAW,CAAC,CAAC,CAAC,GAAE;UAClE,OAAOK,UAAU,GAAG,oEAAoE;;QAE1F,OACEA,UAAU,GACV,6GAA6G;MAEjH,CAAC,EAAEP,iBAAiB;;GAEvB,EACDA,iBAAiB,CAClB;AACH","names":["buildMessage","ValidateBy","isLengthValidator","IS_LENGTH","length","value","min","max","Length","validationOptions","name","constraints","validator","validate","args","defaultMessage","eachPrefix","isMinLength","undefined","isMaxLength"],"sourceRoot":"","sources":["../../../../src/decorator/string/Length.ts"],"sourcesContent":["import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isLengthValidator from 'validator/lib/isLength';\n\nexport const IS_LENGTH = 'isLength';\n\n/**\n * Checks if the string's length falls in a range. Note: this function takes into account surrogate pairs.\n * If given value is not a string, then it returns false.\n */\nexport function length(value: unknown, min: number, max?: number): boolean {\n  return typeof value === 'string' && isLengthValidator(value, { min, max });\n}\n\n/**\n * Checks if the string's length falls in a range. Note: this function takes into account surrogate pairs.\n * If given value is not a string, then it returns false.\n */\nexport function Length(min: number, max?: number, validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_LENGTH,\n      constraints: [min, max],\n      validator: {\n        validate: (value, args): boolean => length(value, args?.constraints[0], args?.constraints[1]),\n        defaultMessage: buildMessage((eachPrefix, args) => {\n          const isMinLength = args?.constraints[0] !== null && args?.constraints[0] !== undefined;\n          const isMaxLength = args?.constraints[1] !== null && args?.constraints[1] !== undefined;\n          if (isMinLength && (!args.value || args.value.length < args?.constraints[0])) {\n            return eachPrefix + '$property must be longer than or equal to $constraint1 characters';\n          } else if (isMaxLength && args.value.length > args?.constraints[1]) {\n            return eachPrefix + '$property must be shorter than or equal to $constraint2 characters';\n          }\n          return (\n            eachPrefix +\n            '$property must be longer than or equal to $constraint1 and shorter than or equal to $constraint2 characters'\n          );\n        }, validationOptions),\n      },\n    },\n    validationOptions\n  );\n}\n"]},"metadata":{},"sourceType":"module"}