{"ast":null,"code":"import { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport { parsePhoneNumberFromString } from 'libphonenumber-js';\nexport var IS_PHONE_NUMBER = 'isPhoneNumber';\n/**\n * Checks if the string is a valid phone number. To successfully validate any phone number the text must include\n * the intl. calling code, if the calling code wont be provided then the region must be set.\n *\n * @param value the potential phone number string to test\n * @param region 2 characters uppercase country code (e.g. DE, US, CH) for country specific validation.\n * If text doesn't start with the international calling code (e.g. +41), then you must set this parameter.\n */\nexport function isPhoneNumber(value, region) {\n  try {\n    var phoneNum = parsePhoneNumberFromString(value, region);\n    var result = phoneNum === null || phoneNum === void 0 ? void 0 : phoneNum.isValid();\n    return !!result;\n  } catch (error) {\n    // logging?\n    return false;\n  }\n}\n/**\n * Checks if the string is a valid phone number. To successfully validate any phone number the text must include\n * the intl. calling code, if the calling code wont be provided then the region must be set.\n *\n * @param region 2 characters uppercase country code (e.g. DE, US, CH) for country specific validation.\n * If text doesn't start with the international calling code (e.g. +41), then you must set this parameter.\n */\nexport function IsPhoneNumber(region, validationOptions) {\n  return ValidateBy({\n    name: IS_PHONE_NUMBER,\n    constraints: [region],\n    validator: {\n      validate: function (value, args) {\n        return isPhoneNumber(value, args === null || args === void 0 ? void 0 : args.constraints[0]);\n      },\n      defaultMessage: buildMessage(function (eachPrefix) {\n        return eachPrefix + '$property must be a valid phone number';\n      }, validationOptions)\n    }\n  }, validationOptions);\n}","map":{"version":3,"mappings":"AACA,SAASA,YAAY,EAAEC,UAAU,QAAQ,sBAAsB;AAC/D,SAASC,0BAA0B,QAAqB,mBAAmB;AAE3E,OAAO,IAAMC,eAAe,GAAG,eAAe;AAE9C;;;;;;;;AAQA,OAAM,SAAUC,aAAaA,CAACC,KAAa,EAAEC,MAAoB;EAC/D,IAAI;IACF,IAAMC,QAAQ,GAAGL,0BAA0B,CAACG,KAAK,EAAEC,MAAM,CAAC;IAC1D,IAAME,MAAM,GAAGD,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEE,OAAO,EAAE;IAClC,OAAO,CAAC,CAACD,MAAM;GAChB,CAAC,OAAOE,KAAK,EAAE;IACd;IACA,OAAO,KAAK;;AAEhB;AAEA;;;;;;;AAOA,OAAM,SAAUC,aAAaA,CAACL,MAAoB,EAAEM,iBAAqC;EACvF,OAAOX,UAAU,CACf;IACEY,IAAI,EAAEV,eAAe;IACrBW,WAAW,EAAE,CAACR,MAAM,CAAC;IACrBS,SAAS,EAAE;MACTC,QAAQ,EAAE,UAACX,KAAK,EAAEY,IAAI;QAAc,oBAAa,CAACZ,KAAK,EAAEY,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEH,WAAW,CAAC,CAAC,CAAC,CAAC;MAA1C,CAA0C;MAC9EI,cAAc,EAAElB,YAAY,CAC1B,oBAAU;QAAI,iBAAU,GAAG,wCAAwC;MAArD,CAAqD,EACnEY,iBAAiB;;GAGtB,EACDA,iBAAiB,CAClB;AACH","names":["buildMessage","ValidateBy","parsePhoneNumberFromString","IS_PHONE_NUMBER","isPhoneNumber","value","region","phoneNum","result","isValid","error","IsPhoneNumber","validationOptions","name","constraints","validator","validate","args","defaultMessage"],"sourceRoot":"","sources":["../../../../src/decorator/string/IsPhoneNumber.ts"],"sourcesContent":["import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport { parsePhoneNumberFromString, CountryCode } from 'libphonenumber-js';\n\nexport const IS_PHONE_NUMBER = 'isPhoneNumber';\n\n/**\n * Checks if the string is a valid phone number. To successfully validate any phone number the text must include\n * the intl. calling code, if the calling code wont be provided then the region must be set.\n *\n * @param value the potential phone number string to test\n * @param region 2 characters uppercase country code (e.g. DE, US, CH) for country specific validation.\n * If text doesn't start with the international calling code (e.g. +41), then you must set this parameter.\n */\nexport function isPhoneNumber(value: string, region?: CountryCode): boolean {\n  try {\n    const phoneNum = parsePhoneNumberFromString(value, region);\n    const result = phoneNum?.isValid();\n    return !!result;\n  } catch (error) {\n    // logging?\n    return false;\n  }\n}\n\n/**\n * Checks if the string is a valid phone number. To successfully validate any phone number the text must include\n * the intl. calling code, if the calling code wont be provided then the region must be set.\n *\n * @param region 2 characters uppercase country code (e.g. DE, US, CH) for country specific validation.\n * If text doesn't start with the international calling code (e.g. +41), then you must set this parameter.\n */\nexport function IsPhoneNumber(region?: CountryCode, validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_PHONE_NUMBER,\n      constraints: [region],\n      validator: {\n        validate: (value, args): boolean => isPhoneNumber(value, args?.constraints[0]),\n        defaultMessage: buildMessage(\n          eachPrefix => eachPrefix + '$property must be a valid phone number',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n"]},"metadata":{},"sourceType":"module"}