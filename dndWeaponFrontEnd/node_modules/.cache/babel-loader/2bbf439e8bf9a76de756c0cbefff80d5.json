{"ast":null,"code":"import { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isIPValidator from 'validator/lib/isIP';\nexport var IS_IP = 'isIp';\n/**\n * Checks if the string is an IP (version 4 or 6).\n * If given value is not a string, then it returns false.\n */\nexport function isIP(value, version) {\n  /* eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion */\n  var versionStr = version ? \"\".concat(version) : undefined;\n  return typeof value === 'string' && isIPValidator(value, versionStr);\n}\n/**\n * Checks if the string is an IP (version 4 or 6).\n * If given value is not a string, then it returns false.\n */\nexport function IsIP(version, validationOptions) {\n  return ValidateBy({\n    name: IS_IP,\n    constraints: [version],\n    validator: {\n      validate: function (value, args) {\n        return isIP(value, args === null || args === void 0 ? void 0 : args.constraints[0]);\n      },\n      defaultMessage: buildMessage(function (eachPrefix) {\n        return eachPrefix + '$property must be an ip address';\n      }, validationOptions)\n    }\n  }, validationOptions);\n}","map":{"version":3,"mappings":"AACA,SAASA,YAAY,EAAEC,UAAU,QAAQ,sBAAsB;AAC/D,OAAOC,aAAa,MAAM,oBAAoB;AAI9C,OAAO,IAAMC,KAAK,GAAG,MAAM;AAE3B;;;;AAIA,OAAM,SAAUC,IAAIA,CAACC,KAAc,EAAEC,OAAqB;EACxD;EACA,IAAMC,UAAU,GAAGD,OAAO,GAAI,UAAGA,OAAO,CAAgB,GAAGE,SAAS;EACpE,OAAO,OAAOH,KAAK,KAAK,QAAQ,IAAIH,aAAa,CAACG,KAAK,EAAEE,UAAU,CAAC;AACtE;AAEA;;;;AAIA,OAAM,SAAUE,IAAIA,CAACH,OAAqB,EAAEI,iBAAqC;EAC/E,OAAOT,UAAU,CACf;IACEU,IAAI,EAAER,KAAK;IACXS,WAAW,EAAE,CAACN,OAAO,CAAC;IACtBO,SAAS,EAAE;MACTC,QAAQ,EAAE,UAACT,KAAK,EAAEU,IAAI;QAAc,WAAI,CAACV,KAAK,EAAEU,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEH,WAAW,CAAC,CAAC,CAAC,CAAC;MAAjC,CAAiC;MACrEI,cAAc,EAAEhB,YAAY,CAAC,oBAAU;QAAI,iBAAU,GAAG,iCAAiC;MAA9C,CAA8C,EAAEU,iBAAiB;;GAE/G,EACDA,iBAAiB,CAClB;AACH","names":["buildMessage","ValidateBy","isIPValidator","IS_IP","isIP","value","version","versionStr","undefined","IsIP","validationOptions","name","constraints","validator","validate","args","defaultMessage"],"sourceRoot":"","sources":["../../../../src/decorator/string/IsIP.ts"],"sourcesContent":["import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isIPValidator from 'validator/lib/isIP';\n\nexport type IsIpVersion = '4' | '6' | 4 | 6;\n\nexport const IS_IP = 'isIp';\n\n/**\n * Checks if the string is an IP (version 4 or 6).\n * If given value is not a string, then it returns false.\n */\nexport function isIP(value: unknown, version?: IsIpVersion): boolean {\n  /* eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion */\n  const versionStr = version ? (`${version}` as '4' | '6') : undefined;\n  return typeof value === 'string' && isIPValidator(value, versionStr);\n}\n\n/**\n * Checks if the string is an IP (version 4 or 6).\n * If given value is not a string, then it returns false.\n */\nexport function IsIP(version?: IsIpVersion, validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_IP,\n      constraints: [version],\n      validator: {\n        validate: (value, args): boolean => isIP(value, args?.constraints[0]),\n        defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be an ip address', validationOptions),\n      },\n    },\n    validationOptions\n  );\n}\n"]},"metadata":{},"sourceType":"module"}