{"ast":null,"code":"import { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isFqdnValidator from 'validator/lib/isFQDN';\nexport var IS_FQDN = 'isFqdn';\n/**\n * Checks if the string is a fully qualified domain name (e.g. domain.com).\n * If given value is not a string, then it returns false.\n */\nexport function isFQDN(value, options) {\n  return typeof value === 'string' && isFqdnValidator(value, options);\n}\n/**\n * Checks if the string is a fully qualified domain name (e.g. domain.com).\n * If given value is not a string, then it returns false.\n */\nexport function IsFQDN(options, validationOptions) {\n  return ValidateBy({\n    name: IS_FQDN,\n    constraints: [options],\n    validator: {\n      validate: function (value, args) {\n        return isFQDN(value, args === null || args === void 0 ? void 0 : args.constraints[0]);\n      },\n      defaultMessage: buildMessage(function (eachPrefix) {\n        return eachPrefix + '$property must be a valid domain name';\n      }, validationOptions)\n    }\n  }, validationOptions);\n}","map":{"version":3,"mappings":"AACA,SAASA,YAAY,EAAEC,UAAU,QAAQ,sBAAsB;AAC/D,OAAOC,eAAe,MAAM,sBAAsB;AAGlD,OAAO,IAAMC,OAAO,GAAG,QAAQ;AAE/B;;;;AAIA,OAAM,SAAUC,MAAMA,CAACC,KAAc,EAAEC,OAAmC;EACxE,OAAO,OAAOD,KAAK,KAAK,QAAQ,IAAIH,eAAe,CAACG,KAAK,EAAEC,OAAO,CAAC;AACrE;AAEA;;;;AAIA,OAAM,SAAUC,MAAMA,CAACD,OAAmC,EAAEE,iBAAqC;EAC/F,OAAOP,UAAU,CACf;IACEQ,IAAI,EAAEN,OAAO;IACbO,WAAW,EAAE,CAACJ,OAAO,CAAC;IACtBK,SAAS,EAAE;MACTC,QAAQ,EAAE,UAACP,KAAK,EAAEQ,IAAI;QAAc,aAAM,CAACR,KAAK,EAAEQ,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEH,WAAW,CAAC,CAAC,CAAC,CAAC;MAAnC,CAAmC;MACvEI,cAAc,EAAEd,YAAY,CAC1B,oBAAU;QAAI,iBAAU,GAAG,uCAAuC;MAApD,CAAoD,EAClEQ,iBAAiB;;GAGtB,EACDA,iBAAiB,CAClB;AACH","names":["buildMessage","ValidateBy","isFqdnValidator","IS_FQDN","isFQDN","value","options","IsFQDN","validationOptions","name","constraints","validator","validate","args","defaultMessage"],"sourceRoot":"","sources":["../../../../src/decorator/string/IsFQDN.ts"],"sourcesContent":["import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isFqdnValidator from 'validator/lib/isFQDN';\nimport ValidatorJS from 'validator';\n\nexport const IS_FQDN = 'isFqdn';\n\n/**\n * Checks if the string is a fully qualified domain name (e.g. domain.com).\n * If given value is not a string, then it returns false.\n */\nexport function isFQDN(value: unknown, options?: ValidatorJS.IsFQDNOptions): boolean {\n  return typeof value === 'string' && isFqdnValidator(value, options);\n}\n\n/**\n * Checks if the string is a fully qualified domain name (e.g. domain.com).\n * If given value is not a string, then it returns false.\n */\nexport function IsFQDN(options?: ValidatorJS.IsFQDNOptions, validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_FQDN,\n      constraints: [options],\n      validator: {\n        validate: (value, args): boolean => isFQDN(value, args?.constraints[0]),\n        defaultMessage: buildMessage(\n          eachPrefix => eachPrefix + '$property must be a valid domain name',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n"]},"metadata":{},"sourceType":"module"}