{"ast":null,"code":"import { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isByteLengthValidator from 'validator/lib/isByteLength';\nexport var IS_BYTE_LENGTH = 'isByteLength';\n/**\n * Checks if the string's length (in bytes) falls in a range.\n * If given value is not a string, then it returns false.\n */\nexport function isByteLength(value, min, max) {\n  return typeof value === 'string' && isByteLengthValidator(value, {\n    min: min,\n    max: max\n  });\n}\n/**\n * Checks if the string's length (in bytes) falls in a range.\n * If given value is not a string, then it returns false.\n */\nexport function IsByteLength(min, max, validationOptions) {\n  return ValidateBy({\n    name: IS_BYTE_LENGTH,\n    constraints: [min, max],\n    validator: {\n      validate: function (value, args) {\n        return isByteLength(value, args === null || args === void 0 ? void 0 : args.constraints[0], args === null || args === void 0 ? void 0 : args.constraints[1]);\n      },\n      defaultMessage: buildMessage(function (eachPrefix) {\n        return eachPrefix + \"$property's byte length must fall into ($constraint1, $constraint2) range\";\n      }, validationOptions)\n    }\n  }, validationOptions);\n}","map":{"version":3,"mappings":"AACA,SAASA,YAAY,EAAEC,UAAU,QAAQ,sBAAsB;AAC/D,OAAOC,qBAAqB,MAAM,4BAA4B;AAE9D,OAAO,IAAMC,cAAc,GAAG,cAAc;AAE5C;;;;AAIA,OAAM,SAAUC,YAAYA,CAACC,KAAc,EAAEC,GAAW,EAAEC,GAAY;EACpE,OAAO,OAAOF,KAAK,KAAK,QAAQ,IAAIH,qBAAqB,CAACG,KAAK,EAAE;IAAEC,GAAG;IAAEC,GAAG;EAAA,CAAE,CAAC;AAChF;AAEA;;;;AAIA,OAAM,SAAUC,YAAYA,CAACF,GAAW,EAAEC,GAAY,EAAEE,iBAAqC;EAC3F,OAAOR,UAAU,CACf;IACES,IAAI,EAAEP,cAAc;IACpBQ,WAAW,EAAE,CAACL,GAAG,EAAEC,GAAG,CAAC;IACvBK,SAAS,EAAE;MACTC,QAAQ,EAAE,UAACR,KAAK,EAAES,IAAI;QAAc,mBAAY,CAACT,KAAK,EAAES,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEH,WAAW,CAAC,CAAC,CAAC,EAAEG,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEH,WAAW,CAAC,CAAC,CAAC,CAAC;MAA/D,CAA+D;MACnGI,cAAc,EAAEf,YAAY,CAC1B,oBAAU;QAAI,iBAAU,GAAG,2EAA2E;MAAxF,CAAwF,EACtGS,iBAAiB;;GAGtB,EACDA,iBAAiB,CAClB;AACH","names":["buildMessage","ValidateBy","isByteLengthValidator","IS_BYTE_LENGTH","isByteLength","value","min","max","IsByteLength","validationOptions","name","constraints","validator","validate","args","defaultMessage"],"sourceRoot":"","sources":["../../../../src/decorator/string/IsByteLength.ts"],"sourcesContent":["import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isByteLengthValidator from 'validator/lib/isByteLength';\n\nexport const IS_BYTE_LENGTH = 'isByteLength';\n\n/**\n * Checks if the string's length (in bytes) falls in a range.\n * If given value is not a string, then it returns false.\n */\nexport function isByteLength(value: unknown, min: number, max?: number): boolean {\n  return typeof value === 'string' && isByteLengthValidator(value, { min, max });\n}\n\n/**\n * Checks if the string's length (in bytes) falls in a range.\n * If given value is not a string, then it returns false.\n */\nexport function IsByteLength(min: number, max?: number, validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_BYTE_LENGTH,\n      constraints: [min, max],\n      validator: {\n        validate: (value, args): boolean => isByteLength(value, args?.constraints[0], args?.constraints[1]),\n        defaultMessage: buildMessage(\n          eachPrefix => eachPrefix + \"$property's byte length must fall into ($constraint1, $constraint2) range\",\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n"]},"metadata":{},"sourceType":"module"}