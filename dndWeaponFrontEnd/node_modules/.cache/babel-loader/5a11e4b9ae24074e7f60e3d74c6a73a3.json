{"ast":null,"code":"/**\n * This metadata contains validation rules.\n */\nvar ValidationMetadata = /** @class */function () {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  function ValidationMetadata(args) {\n    /**\n     * Validation groups used for this validation.\n     */\n    this.groups = [];\n    /**\n     * Specifies if validated value is an array and each of its item must be validated.\n     */\n    this.each = false;\n    /*\n     * A transient set of data passed through to the validation result for response mapping\n     */\n    this.context = undefined;\n    this.type = args.type;\n    this.name = args.name;\n    this.target = args.target;\n    this.propertyName = args.propertyName;\n    this.constraints = args === null || args === void 0 ? void 0 : args.constraints;\n    this.constraintCls = args.constraintCls;\n    this.validationTypeOptions = args.validationTypeOptions;\n    if (args.validationOptions) {\n      this.message = args.validationOptions.message;\n      this.groups = args.validationOptions.groups;\n      this.always = args.validationOptions.always;\n      this.each = args.validationOptions.each;\n      this.context = args.validationOptions.context;\n    }\n  }\n  return ValidationMetadata;\n}();\nexport { ValidationMetadata };","map":{"version":3,"mappings":"AAGA;;;AAGA;EAiEE;EACA;EACA;EAEA,4BAAYA,IAA4B;IA7BxC;;;IAGA,WAAM,GAAa,EAAE;IAOrB;;;IAGA,SAAI,GAAY,KAAK;IAErB;;;IAGA,YAAO,GAASC,SAAS;IAYvB,IAAI,CAACC,IAAI,GAAGF,IAAI,CAACE,IAAI;IACrB,IAAI,CAACC,IAAI,GAAGH,IAAI,CAACG,IAAI;IACrB,IAAI,CAACC,MAAM,GAAGJ,IAAI,CAACI,MAAM;IACzB,IAAI,CAACC,YAAY,GAAGL,IAAI,CAACK,YAAY;IACrC,IAAI,CAACC,WAAW,GAAGN,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEM,WAAW;IACpC,IAAI,CAACC,aAAa,GAAGP,IAAI,CAACO,aAAa;IACvC,IAAI,CAACC,qBAAqB,GAAGR,IAAI,CAACQ,qBAAqB;IACvD,IAAIR,IAAI,CAACS,iBAAiB,EAAE;MAC1B,IAAI,CAACC,OAAO,GAAGV,IAAI,CAACS,iBAAiB,CAACC,OAAO;MAC7C,IAAI,CAACC,MAAM,GAAGX,IAAI,CAACS,iBAAiB,CAACE,MAAM;MAC3C,IAAI,CAACC,MAAM,GAAGZ,IAAI,CAACS,iBAAiB,CAACG,MAAM;MAC3C,IAAI,CAACC,IAAI,GAAGb,IAAI,CAACS,iBAAiB,CAACI,IAAI;MACvC,IAAI,CAACC,OAAO,GAAGd,IAAI,CAACS,iBAAiB,CAACK,OAAO;;EAEjD;EACF,yBAAC;AAAD,CAAC,CArFD","names":["args","undefined","type","name","target","propertyName","constraints","constraintCls","validationTypeOptions","validationOptions","message","groups","always","each","context"],"sourceRoot":"","sources":["../../../src/metadata/ValidationMetadata.ts"],"sourcesContent":["import { ValidationMetadataArgs } from './ValidationMetadataArgs';\nimport { ValidationArguments } from '../validation/ValidationArguments';\n\n/**\n * This metadata contains validation rules.\n */\nexport class ValidationMetadata {\n  // -------------------------------------------------------------------------\n  // Properties\n  // -------------------------------------------------------------------------\n\n  /**\n   * Validation type.\n   */\n  type: string;\n\n  /**\n   * Validator name.\n   */\n  name?: string;\n\n  /**\n   * Target class to which this validation is applied.\n   */\n  target: Function | string;\n\n  /**\n   * Property of the object to be validated.\n   */\n  propertyName: string;\n\n  /**\n   * Constraint class that performs validation. Used only for custom validations.\n   */\n  constraintCls: Function;\n\n  /**\n   * Array of constraints of this validation.\n   */\n  constraints: any[];\n\n  /**\n   * Validation message to be shown in the case of error.\n   */\n  message: string | ((args: ValidationArguments) => string);\n\n  /**\n   * Validation groups used for this validation.\n   */\n  groups: string[] = [];\n\n  /**\n   * Indicates if validation must be performed always, no matter of validation groups used.\n   */\n  always?: boolean;\n\n  /**\n   * Specifies if validated value is an array and each of its item must be validated.\n   */\n  each: boolean = false;\n\n  /*\n   * A transient set of data passed through to the validation result for response mapping\n   */\n  context?: any = undefined;\n\n  /**\n   * Extra options specific to validation type.\n   */\n  validationTypeOptions: any;\n\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n\n  constructor(args: ValidationMetadataArgs) {\n    this.type = args.type;\n    this.name = args.name;\n    this.target = args.target;\n    this.propertyName = args.propertyName;\n    this.constraints = args?.constraints;\n    this.constraintCls = args.constraintCls;\n    this.validationTypeOptions = args.validationTypeOptions;\n    if (args.validationOptions) {\n      this.message = args.validationOptions.message;\n      this.groups = args.validationOptions.groups;\n      this.always = args.validationOptions.always;\n      this.each = args.validationOptions.each;\n      this.context = args.validationOptions.context;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}