{"ast":null,"code":"import validator from 'validator';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nexport var IS_STRONG_PASSWORD = 'isStrongPassword';\n/**\n * Checks if the string is a strong password.\n * If given value is not a string, then it returns false.\n */\nexport function isStrongPassword(value, options) {\n  return typeof value === 'string' && validator.isStrongPassword(value, options);\n}\n/**\n * Checks if the string is a strong password.\n * If given value is not a string, then it returns false.\n */\nexport function IsStrongPassword(options, validationOptions) {\n  return ValidateBy({\n    name: IS_STRONG_PASSWORD,\n    constraints: [options],\n    validator: {\n      validate: function (value, args) {\n        return isStrongPassword(value, args.constraints[0]);\n      },\n      defaultMessage: buildMessage(function (eachPrefix) {\n        return eachPrefix + '$property is not strong enough';\n      }, validationOptions)\n    }\n  }, validationOptions);\n}","map":{"version":3,"mappings":"AAAA,OAAOA,SAAS,MAAM,WAAW;AAEjC,SAASC,YAAY,EAAEC,UAAU,QAAQ,sBAAsB;AAE/D,OAAO,IAAMC,kBAAkB,GAAG,kBAAkB;AAUpD;;;;AAIA,OAAM,SAAUC,gBAAgBA,CAACC,KAAc,EAAEC,OAAiC;EAChF,OAAO,OAAOD,KAAK,KAAK,QAAQ,IAAIL,SAAS,CAACI,gBAAgB,CAACC,KAAK,EAAEC,OAAO,CAAC;AAChF;AAEA;;;;AAIA,OAAM,SAAUC,gBAAgBA,CAC9BD,OAAiC,EACjCE,iBAAqC;EAErC,OAAON,UAAU,CACf;IACEO,IAAI,EAAEN,kBAAkB;IACxBO,WAAW,EAAE,CAACJ,OAAO,CAAC;IACtBN,SAAS,EAAE;MACTW,QAAQ,EAAE,UAACN,KAAK,EAAEO,IAAI;QAAc,uBAAgB,CAACP,KAAK,EAAEO,IAAI,CAACF,WAAW,CAAC,CAAC,CAAC,CAAC;MAA5C,CAA4C;MAChFG,cAAc,EAAEZ,YAAY,CAAC,oBAAU;QAAI,iBAAU,GAAG,gCAAgC;MAA7C,CAA6C,EAAEO,iBAAiB;;GAE9G,EACDA,iBAAiB,CAClB;AACH","names":["validator","buildMessage","ValidateBy","IS_STRONG_PASSWORD","isStrongPassword","value","options","IsStrongPassword","validationOptions","name","constraints","validate","args","defaultMessage"],"sourceRoot":"","sources":["../../../../src/decorator/string/IsStrongPassword.ts"],"sourcesContent":["import validator from 'validator';\nimport { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\n\nexport const IS_STRONG_PASSWORD = 'isStrongPassword';\n\n/**\n * Options to be passed to IsStrongPassword decorator.\n */\nexport type IsStrongPasswordOptions = Pick<\n  validator.StrongPasswordOptions,\n  'minLength' | 'minLowercase' | 'minUppercase' | 'minNumbers' | 'minSymbols'\n>;\n\n/**\n * Checks if the string is a strong password.\n * If given value is not a string, then it returns false.\n */\nexport function isStrongPassword(value: unknown, options?: IsStrongPasswordOptions): boolean {\n  return typeof value === 'string' && validator.isStrongPassword(value, options);\n}\n\n/**\n * Checks if the string is a strong password.\n * If given value is not a string, then it returns false.\n */\nexport function IsStrongPassword(\n  options?: IsStrongPasswordOptions,\n  validationOptions?: ValidationOptions\n): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_STRONG_PASSWORD,\n      constraints: [options],\n      validator: {\n        validate: (value, args): boolean => isStrongPassword(value, args.constraints[0]),\n        defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property is not strong enough', validationOptions),\n      },\n    },\n    validationOptions\n  );\n}\n"]},"metadata":{},"sourceType":"module"}