{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ValidationMetadata } from '../metadata/ValidationMetadata';\n/**\n * Used to transform validation schemas to validation metadatas.\n */\nvar ValidationSchemaToMetadataTransformer = /** @class */function () {\n  function ValidationSchemaToMetadataTransformer() {}\n  ValidationSchemaToMetadataTransformer.prototype.transform = function (schema) {\n    var metadatas = [];\n    Object.keys(schema.properties).forEach(function (property) {\n      schema.properties[property].forEach(function (validation) {\n        var validationOptions = {\n          message: validation.message,\n          groups: validation.groups,\n          always: validation.always,\n          each: validation.each\n        };\n        var args = {\n          type: validation.type,\n          name: validation.name,\n          target: schema.name,\n          propertyName: property,\n          constraints: validation.constraints,\n          validationTypeOptions: validation.options,\n          validationOptions: validationOptions\n        };\n        metadatas.push(new ValidationMetadata(args));\n      });\n    });\n    return metadatas;\n  };\n  return ValidationSchemaToMetadataTransformer;\n}();\nexport { ValidationSchemaToMetadataTransformer };","map":{"version":3,"mappings":";AACA,SAASA,kBAAkB,QAAQ,gCAAgC;AAInE;;;AAGA;EAAA,kDAyBA;EAxBEC,yDAAS,GAAT,UAAUC,MAAwB;IAChC,IAAMC,SAAS,GAAyB,EAAE;IAC1CC,MAAM,CAACC,IAAI,CAACH,MAAM,CAACI,UAAU,CAAC,CAACC,OAAO,CAAC,kBAAQ;MAC7CL,MAAM,CAACI,UAAU,CAACE,QAAQ,CAAC,CAACD,OAAO,CAAC,oBAAU;QAC5C,IAAME,iBAAiB,GAAsB;UAC3CC,OAAO,EAAEC,UAAU,CAACD,OAAO;UAC3BE,MAAM,EAAED,UAAU,CAACC,MAAM;UACzBC,MAAM,EAAEF,UAAU,CAACE,MAAM;UACzBC,IAAI,EAAEH,UAAU,CAACG;SAClB;QACD,IAAMC,IAAI,GAA2B;UACnCC,IAAI,EAAEL,UAAU,CAACK,IAAI;UACrBC,IAAI,EAAEN,UAAU,CAACM,IAAI;UACrBC,MAAM,EAAEhB,MAAM,CAACe,IAAI;UACnBE,YAAY,EAAEX,QAAQ;UACtBY,WAAW,EAAET,UAAU,CAACS,WAAW;UACnCC,qBAAqB,EAAEV,UAAU,CAACW,OAAO;UACzCb,iBAAiB,EAAEA;SACpB;QACDN,SAAS,CAACoB,IAAI,CAAC,IAAIvB,kBAAkB,CAACe,IAAI,CAAC,CAAC;MAC9C,CAAC,CAAC;IACJ,CAAC,CAAC;IACF,OAAOZ,SAAS;EAClB,CAAC;EACH,4CAAC;AAAD,CAAC,CAzBD","names":["ValidationMetadata","ValidationSchemaToMetadataTransformer","schema","metadatas","Object","keys","properties","forEach","property","validationOptions","message","validation","groups","always","each","args","type","name","target","propertyName","constraints","validationTypeOptions","options","push"],"sourceRoot":"","sources":["../../../src/validation-schema/ValidationSchemaToMetadataTransformer.ts"],"sourcesContent":["import { ValidationSchema } from './ValidationSchema';\nimport { ValidationMetadata } from '../metadata/ValidationMetadata';\nimport { ValidationMetadataArgs } from '../metadata/ValidationMetadataArgs';\nimport { ValidationOptions } from '../decorator/ValidationOptions';\n\n/**\n * Used to transform validation schemas to validation metadatas.\n */\nexport class ValidationSchemaToMetadataTransformer {\n  transform(schema: ValidationSchema): ValidationMetadata[] {\n    const metadatas: ValidationMetadata[] = [];\n    Object.keys(schema.properties).forEach(property => {\n      schema.properties[property].forEach(validation => {\n        const validationOptions: ValidationOptions = {\n          message: validation.message,\n          groups: validation.groups,\n          always: validation.always,\n          each: validation.each,\n        };\n        const args: ValidationMetadataArgs = {\n          type: validation.type,\n          name: validation.name,\n          target: schema.name,\n          propertyName: property,\n          constraints: validation.constraints,\n          validationTypeOptions: validation.options,\n          validationOptions: validationOptions,\n        };\n        metadatas.push(new ValidationMetadata(args));\n      });\n    });\n    return metadatas;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}