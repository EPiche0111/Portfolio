{"ast":null,"code":"/**\n * Validation error description.\n */\nvar ValidationError = /** @class */function () {\n  function ValidationError() {}\n  /**\n   *\n   * @param shouldDecorate decorate the message with ANSI formatter escape codes for better readability\n   * @param hasParent true when the error is a child of an another one\n   * @param parentPath path as string to the parent of this property\n   * @param showConstraintMessages show constraint messages instead of constraint names\n   */\n  ValidationError.prototype.toString = function (shouldDecorate, hasParent, parentPath, showConstraintMessages) {\n    var _this = this;\n    if (shouldDecorate === void 0) {\n      shouldDecorate = false;\n    }\n    if (hasParent === void 0) {\n      hasParent = false;\n    }\n    if (parentPath === void 0) {\n      parentPath = \"\";\n    }\n    if (showConstraintMessages === void 0) {\n      showConstraintMessages = false;\n    }\n    var boldStart = shouldDecorate ? \"\\u001B[1m\" : \"\";\n    var boldEnd = shouldDecorate ? \"\\u001B[22m\" : \"\";\n    var constraintsToString = function () {\n      var _a;\n      return (showConstraintMessages ? Object.values : Object.keys)((_a = _this.constraints) !== null && _a !== void 0 ? _a : {}).join(\", \");\n    };\n    var propConstraintFailed = function (propertyName) {\n      return \" - property \".concat(boldStart).concat(parentPath).concat(propertyName).concat(boldEnd, \" has failed the following constraints: \").concat(boldStart).concat(constraintsToString()).concat(boldEnd, \" \\n\");\n    };\n    if (!hasParent) {\n      return \"An instance of \".concat(boldStart).concat(this.target ? this.target.constructor.name : 'an object').concat(boldEnd, \" has failed the validation:\\n\") + (this.constraints ? propConstraintFailed(this.property) : \"\") + (this.children ? this.children.map(function (childError) {\n        return childError.toString(shouldDecorate, true, _this.property, showConstraintMessages);\n      }).join(\"\") : \"\");\n    } else {\n      // we format numbers as array indexes for better readability.\n      var formattedProperty_1 = Number.isInteger(+this.property) ? \"[\".concat(this.property, \"]\") : \"\".concat(parentPath ? \".\" : \"\").concat(this.property);\n      if (this.constraints) {\n        return propConstraintFailed(formattedProperty_1);\n      } else {\n        return this.children ? this.children.map(function (childError) {\n          return childError.toString(shouldDecorate, true, \"\".concat(parentPath).concat(formattedProperty_1), showConstraintMessages);\n        }).join(\"\") : \"\";\n      }\n    }\n  };\n  return ValidationError;\n}();\nexport { ValidationError };","map":{"version":3,"mappings":"AAAA;;;AAGA;EAAA,4BA0FA;EAnDE;;;;;;;EAOAA,kCAAQ,GAAR,UACEC,cAA+B,EAC/BC,SAA0B,EAC1BC,UAAuB,EACvBC,sBAAuC;IAJzC;IACE;MAAAH,sBAA+B;IAAA;IAC/B;MAAAC,iBAA0B;IAAA;IAC1B;MAAAC,eAAuB;IAAA;IACvB;MAAAC,8BAAuC;IAAA;IAEvC,IAAMC,SAAS,GAAGJ,cAAc,GAAG,WAAS,GAAG,EAAE;IACjD,IAAMK,OAAO,GAAGL,cAAc,GAAG,YAAU,GAAG,EAAE;IAChD,IAAMM,mBAAmB,GAAG;MAAA;MAC1B,QAACH,sBAAsB,GAAGI,MAAM,CAACC,MAAM,GAAGD,MAAM,CAACE,IAAI,EAAE,WAAI,CAACC,WAAW,mCAAI,EAAE,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;IAAA;IAC3F,IAAMC,oBAAoB,GAAG,UAACC,YAAoB;MAChD,6BAAeT,SAAS,SAAGF,UAAU,SAAGW,YAAY,SAAGR,OAAO,oDAA0CD,SAAS,SAAGE,mBAAmB,EAAE,SAAGD,OAAO,QAAK;IAAxJ,CAAwJ;IAE1J,IAAI,CAACJ,SAAS,EAAE;MACd,OACE,yBAAkBG,SAAS,SACzB,IAAI,CAACU,MAAM,GAAG,IAAI,CAACA,MAAM,CAACC,WAAW,CAACC,IAAI,GAAG,WAAW,SACvDX,OAAO,kCAA+B,IACxC,IAAI,CAACK,WAAW,GAAGE,oBAAoB,CAAC,IAAI,CAACK,QAAQ,CAAC,GAAG,EAAE,CAAC,IAC5D,IAAI,CAACC,QAAQ,GACV,IAAI,CAACA,QAAQ,CACVC,GAAG,CAAC,oBAAU;QAAI,iBAAU,CAACC,QAAQ,CAACpB,cAAc,EAAE,IAAI,EAAEqB,KAAI,CAACJ,QAAQ,EAAEd,sBAAsB,CAAC;MAAhF,CAAgF,CAAC,CACnGQ,IAAI,CAAC,EAAE,CAAC,GACX,EAAE,CAAC;KAEV,MAAM;MACL;MACA,IAAMW,mBAAiB,GAAGC,MAAM,CAACC,SAAS,CAAC,CAAC,IAAI,CAACP,QAAQ,CAAC,GACtD,WAAI,IAAI,CAACA,QAAQ,MAAG,GACpB,UAAGf,UAAU,GAAG,GAAG,GAAG,EAAE,SAAG,IAAI,CAACe,QAAQ,CAAE;MAE9C,IAAI,IAAI,CAACP,WAAW,EAAE;QACpB,OAAOE,oBAAoB,CAACU,mBAAiB,CAAC;OAC/C,MAAM;QACL,OAAO,IAAI,CAACJ,QAAQ,GAChB,IAAI,CAACA,QAAQ,CACVC,GAAG,CAAC,oBAAU;UACb,iBAAU,CAACC,QAAQ,CAACpB,cAAc,EAAE,IAAI,EAAE,UAAGE,UAAU,SAAGoB,mBAAiB,CAAE,EAAEnB,sBAAsB,CAAC;QAAtG,CAAsG,CACvG,CACAQ,IAAI,CAAC,EAAE,CAAC,GACX,EAAE;;;EAGZ,CAAC;EACH,sBAAC;AAAD,CAAC,CA1FD","names":["ValidationError","shouldDecorate","hasParent","parentPath","showConstraintMessages","boldStart","boldEnd","constraintsToString","Object","values","keys","constraints","join","propConstraintFailed","propertyName","target","constructor","name","property","children","map","toString","_this","formattedProperty_1","Number","isInteger"],"sourceRoot":"","sources":["../../../src/validation/ValidationError.ts"],"sourcesContent":["/**\n * Validation error description.\n */\nexport class ValidationError {\n  /**\n   * Object that was validated.\n   *\n   * OPTIONAL - configurable via the ValidatorOptions.validationError.target option\n   */\n  target?: object;\n\n  /**\n   * Object's property that haven't pass validation.\n   */\n  property: string;\n\n  /**\n   * Value that haven't pass a validation.\n   *\n   * OPTIONAL - configurable via the ValidatorOptions.validationError.value option\n   */\n  value?: any;\n\n  /**\n   * Constraints that failed validation with error messages.\n   */\n  constraints?: {\n    [type: string]: string;\n  };\n\n  /**\n   * Contains all nested validation errors of the property.\n   */\n  children?: ValidationError[];\n\n  /*\n   * A transient set of data passed through to the validation result for response mapping\n   */\n  contexts?: {\n    [type: string]: any;\n  };\n\n  /**\n   *\n   * @param shouldDecorate decorate the message with ANSI formatter escape codes for better readability\n   * @param hasParent true when the error is a child of an another one\n   * @param parentPath path as string to the parent of this property\n   * @param showConstraintMessages show constraint messages instead of constraint names\n   */\n  toString(\n    shouldDecorate: boolean = false,\n    hasParent: boolean = false,\n    parentPath: string = ``,\n    showConstraintMessages: boolean = false\n  ): string {\n    const boldStart = shouldDecorate ? `\\x1b[1m` : ``;\n    const boldEnd = shouldDecorate ? `\\x1b[22m` : ``;\n    const constraintsToString = () =>\n      (showConstraintMessages ? Object.values : Object.keys)(this.constraints ?? {}).join(`, `);\n    const propConstraintFailed = (propertyName: string): string =>\n      ` - property ${boldStart}${parentPath}${propertyName}${boldEnd} has failed the following constraints: ${boldStart}${constraintsToString()}${boldEnd} \\n`;\n\n    if (!hasParent) {\n      return (\n        `An instance of ${boldStart}${\n          this.target ? this.target.constructor.name : 'an object'\n        }${boldEnd} has failed the validation:\\n` +\n        (this.constraints ? propConstraintFailed(this.property) : ``) +\n        (this.children\n          ? this.children\n              .map(childError => childError.toString(shouldDecorate, true, this.property, showConstraintMessages))\n              .join(``)\n          : ``)\n      );\n    } else {\n      // we format numbers as array indexes for better readability.\n      const formattedProperty = Number.isInteger(+this.property)\n        ? `[${this.property}]`\n        : `${parentPath ? `.` : ``}${this.property}`;\n\n      if (this.constraints) {\n        return propConstraintFailed(formattedProperty);\n      } else {\n        return this.children\n          ? this.children\n              .map(childError =>\n                childError.toString(shouldDecorate, true, `${parentPath}${formattedProperty}`, showConstraintMessages)\n              )\n              .join(``)\n          : ``;\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}